#!/usr/bin/perl --
#
#  [ businesscard ]
#
#  Copyright 2019 Ecole Polytechnique Federale de Lausanne (EPFL)
#
#  Author:  Ion CIONCA [ion.cionca@epfl.ch][April 2019]
#
#_________________________________________________________________

use lib '/opt/dinfo/lib/perl';
use utf8;
use strict;
use Data::Dumper;
use Mail::Sendmail;
use HTML::Template;
use MIME::Words qw(:all);

use Tequila::Client;
use Cadi::CadiDB;
use Cadi::Accreds;
use Cadi::WSUtils;
use Cadi::Persons;
use Accred::Rights;

use vars qw( $tequila $tmpl_labels $adminUnits $usersToManage $login);
require 'tmpl_labels.inc';	

	my $droitCVIS		= '11';
	my $helpdesk		= '1234@epfl.ch';
	my $repro_staff = '104782,147506,104732,126981,178145';
	my $mailRepro		= 'ion.cionca@epfl.ch,carinne.christinaz@epfl.ch,roland.chabloz@epfl.ch,thomas.reynaud@epfl.ch,anne-sylvie.borter@epfl.ch';

	my $repro_staff = '104782,126981';
	my $repro_staff = '104782,126981';
	my $mailRepro		= 'ion.cionca@epfl.ch,carinne.christinaz@epfl.ch';

	my $cards_status = {
		'1'	=> {
			fr => qq{saisie},
			en => qq{input},
			},
		'2'	=> {
			fr => qq{attente validation},
			en => qq{validation request},
			},
		'3'	=> {
			fr => qq{attente repro},
			en => qq{repro queue},
			},
		'4'	=> {
			fr => qq{en cours},
			en => qq{processing},
			},		
		'5'	=> {
			fr => qq{terminÃ©e},
			en => qq{processed},
			},		
	};
	my %prices 		= (
		'50',		'15.-',
		'100',	'25.-',
		'200',	'30.-',
		'300',	'35.-',
	);
	my $MAXFIELD_ADDR	= 45;
	my $MAXFIELD			= 40;
	
	my $tmpldir				= '/var/www/vhosts/businesscard.epfl.ch/private/tmpl';
	my $DEBUG 	  		= -f '/opt/dinfo/etc/MASTER' ? 0 : 1;
	my $MAX_SIZE 			= 40;
#	binmode (STDOUT, ':utf8');

	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	$mon++;
	$year += 1900;

	my $dbcards 		 = new Cadi::CadiDB ( dbname => 'businesscard',	utf8 => 1, );
	my $dinfodb 		 = new Cadi::CadiDB ( dbname => 'dinfo',				utf8 => 1, );
	my $Accreds  = new Cadi::Accreds ();
	my $Persons	 = new Cadi::Persons ();
	my $Rights	 = new Accred::Rights ();

	my $req 		 = Cadi::WSUtils::loadreq ();
	my $args 		 = $req->{args};
	
	chkArgs ($args);
	
	my $lang 	 	 = $args->{lang} 			? $args->{lang} 		 : 'en';
	my $card_lang = $args->{card_lang} ? $args->{card_lang} : $lang;

	authenticate();
warn "--> PATH_INFO=$ENV{PATH_INFO}\n";
		
	if ($args->{scipertodo}) {
#		error ('no_rights') unless canManage ($args->{scipertodo});
#		$scipertodo = $args->{scipertodo};
	} else {
#		$args->{scipertodo} = $login->{sciper};
	}
#warn "--> scipertodo=$args->{scipertodo}\n";
	
	if ($ENV{PATH_INFO} =~ /^\/edit$/)			{	edit (); }
	if ($ENV{PATH_INFO} =~ /^\/show$/)			{	show (); }
	if ($ENV{PATH_INFO} =~ /^\/valid$/)			{	valid (); }
	if ($ENV{PATH_INFO} =~ /^\/queue$/)			{	queue (); }
	if ($ENV{PATH_INFO} =~ /^\/encours$/)		{	encours (); }
	if ($ENV{PATH_INFO} =~ /^\/done$/)			{	done (); }
	if ($ENV{PATH_INFO} =~ /^\/archive$/)		{	archive (); }
	if ($ENV{PATH_INFO} =~ /^\/delcmd$/)		{	delcmd (); }
	if ($ENV{PATH_INFO} =~ /^\/list$/) 			{	list (); }
	
	main ();
	

exit;

#	-------------
sub main {

	my $template;
	
	if ($args->{scipertodo}) {
		my @persons = getPersons ($args->{scipertodo});
		error ('person_not_found') unless scalar @persons;

warn "--> main persons : scipertodo=$args->{scipertodo}\n".Dumper(@persons);		
		if (scalar @persons == 1) {
			my $person = $persons[0];
			
			my @cards_loop = getUserCmds ($args->{scipertodo});

			$template = initTempl ('main.tmpl');

			$template->param(scipertodo	=> $person->{scipertodo});
			$template->param(name				=> $person->{name});
			$template->param(firstname	=> $person->{firstname});
			$template->param(scipertodo	=> $args->{scipertodo});
			$template->param(cards_loop	=> \@cards_loop);

		} else {
			$template = initTempl ('search.tmpl');
			$template->param(personsloop	=> \@persons);
	
		}

	} else {
			$template = initTempl ('main.tmpl');
	
	}
	
	print "Content-Type: text/html; charset=utf-8\n\n";

	print $template->output;
	exit;
}

#	-------------
sub edit {
	
	my $cmd;
	my $person;
	if ($args->{nocmd}) {
		$cmd 				=  getCmd($args->{nocmd});
		my $etat		= $cmd->{etat};
		my @persons = getPersons ($cmd->{scipertodo});
		$person 		= $persons[0];
		if ($args->{unitid}) {
			$cmd 					= makeCardFromDinfo($person);
			$cmd->{nocmd} = $args->{nocmd};
			$cmd->{etat} 	= $etat;
		}
	} else {
		$args->{scipertodo} = $login->{sciper} unless $args->{scipertodo};
#		error ('person_not_found') unless $args->{scipertodo};
		my @persons = getPersons ($args->{scipertodo});
		$person 		= $persons[0];
		$cmd 				= makeCardFromDinfo($person);
	}
#warn "--> edit person\n".Dumper($person);	
	my $template 		 = initTempl ('edit.tmpl', $cmd);
	
	my @accreds_loop;
	map {
		$person->{accreds}->{$_}->{scipertodo} = $cmd->{scipertodo};
		$person->{accreds}->{$_}->{nocmd} 		 = $cmd->{nocmd};
		$person->{accreds}->{$_}->{unitid} 		 = $_;
		$person->{accreds}->{$_}->{card_lang}  = $card_lang;
		push @accreds_loop, $person->{accreds}->{$_};
	} sort { $person->{accreds}->{$a}->{ordre} <=> $person->{accreds}->{$b}->{ordre} } keys %{$person->{accreds}};
	$template->param(accreds_loop	=> \@accreds_loop );

	$template->param(card_type_adresse	=> 'selected' ) if $cmd->{card_type} eq 'adresse';
	$template->param(card_type_people		=> 'selected' ) if $cmd->{card_type} eq 'people';
	$template->param(card_type_web			=> 'selected' ) if $cmd->{card_type} eq 'web';

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub show {

warn "--> show : update_cmd=$args->{update_cmd}\n";
	my $cmd;
	if ( $args->{update_cmd} ) {
		$cmd = updateCmd (
						{
						nocmd				=> $args->{nocmd},
						etat				=> '1',
						card_type		=> $args->{card_type},
						quantite		=> $args->{quantite},
						scipertodo	=> $args->{scipertodo},
						path1				=> $args->{path1},
						path2				=> $args->{path2},
						path3				=> $args->{path3},
						path4				=> $args->{path4},
						path1_hide	=> $args->{path1_hide},
						path2_hide	=> $args->{path2_hide},
						path3_hide	=> $args->{path3_hide},
						title				=> $args->{title},
						fonction1		=> $args->{fonction1},
						fonction2		=> $args->{fonction2},
						name				=> $args->{name},
						firstname		=> $args->{firstname},
						email				=> $args->{email},
						phone1			=> $args->{phone1},
						phone2			=> $args->{phone2},
						adresse			=> $args->{adresse},
						web					=> $args->{web},
						comments		=> $args->{comments},
						}
					);
								
	} else {
		$cmd = getCmd($args->{nocmd});
	}

	my $template 	 = initTempl ('show.tmpl', $cmd);

	my ($submit_note, $submit_button_label);
	if			 ( isReproStaff() ) {
		unless ( $cmd->{etat} le '2') {
			if  		 ($cmd->{etat} eq '3') {
				$submit_note 	 			 = $tmpl_labels->{repro_en_cours_note}->{$lang};
				$submit_button_label = $tmpl_labels->{repro_en_cours}->{$lang};
				$template->param(en_cours	=> 1 );

			} elsif  ($cmd->{etat} eq '4') {
# 				$submit_note 	 			 = $tmpl_labels->{repro_done_note}->{$lang};
# 				$submit_button_label = $tmpl_labels->{repro_done}->{$lang};
				$template->param(done	=> 1 );
			} else {
			}
		}
	
	} else {

		#	- admin & user
		if ( $cmd->{etat} le '3' ) {
			if ( isAdmin() ) {
				#	- get fonds
				my $fonds = getFondsForUnits();
				my @fonds_loop;
				foreach my $fond (sort keys %$fonds) {
					push @fonds_loop, {
						fond_nb				=> $fond,
						fond_label		=> $fonds->{$fond},
						fond_selected => $cmd->{fond} eq $fond ? 'selected' : '',
					};
				}
				$template->param(fonds_loop	=> \@fonds_loop );

				$submit_note				 = $tmpl_labels->{validate_note}->{$lang} if ( $cmd->{etat} le '3' );
				$submit_button_label = $tmpl_labels->{commander}->{$lang};
				
			} else {	#	- user
				if ( $cmd->{etat} eq '1' ) {
					my $dest	= getAdminsEmails ($cmd->{scipertodo});
					$submit_note				 = qq{$tmpl_labels->{dem_valid_note}->{$lang}<br>$dest};
					$submit_button_label = $tmpl_labels->{dem_valid}->{$lang};
				}
				$submit_note = $tmpl_labels->{queue_note}->{$lang} if $cmd->{etat} eq '3';
			}
			$template->param(del_mod => 1 );

#			$submit_note = $tmpl_labels->{queue_note}->{$lang} if $cmd->{etat} eq '3';

		}
		$template->param(mod_note	=> '' ) unless $cmd->{etat} eq '2' || $cmd->{etat} eq '3';
			
	}	
	$submit_note = $tmpl_labels->{done_note}->{$lang} if $cmd->{etat} eq '5';

	$template->param(submit_note				 => $submit_note );
	$template->param(submit_button_label => $submit_button_label );


	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub show_OLD {

warn "--> show : update_cmd=$args->{update_cmd}\n";
	my $cmd;
	if ( $args->{update_cmd} ) {
		$cmd = updateCmd (
						{
						nocmd				=> $args->{nocmd},
						etat				=> '1',
						card_type		=> $args->{card_type},
						quantite		=> $args->{quantite},
						scipertodo	=> $args->{scipertodo},
						path1				=> $args->{path1},
						path2				=> $args->{path2},
						path3				=> $args->{path3},
						path4				=> $args->{path4},
						path1_hide	=> $args->{path1_hide},
						path2_hide	=> $args->{path2_hide},
						path3_hide	=> $args->{path3_hide},
						title				=> $args->{title},
						fonction1		=> $args->{fonction1},
						fonction2		=> $args->{fonction2},
						name				=> $args->{name},
						firstname		=> $args->{firstname},
						email				=> $args->{email},
						phone1			=> $args->{phone1},
						phone2			=> $args->{phone2},
						adresse			=> $args->{adresse},
						web					=> $args->{web},
						comments		=> $args->{comments},
						}
					);
								
	} else {
		$cmd = getCmd($args->{nocmd});
	}

	my $template 	 = initTempl ('show.tmpl', $cmd);

	my ($show_submit_button, $show_submit_note, $submit_button_label);
	if			 ( isReproStaff() ) {
		if ( $cmd->{etat} le '2') {
			$show_submit_button = 0;
		} else {
			$show_submit_button = 1;
			if  		 ($cmd->{etat} eq '3') {
				$show_submit_note 	 = $tmpl_labels->{repro_en_cours_note}->{$lang};
				$submit_button_label = $tmpl_labels->{repro_en_cours}->{$lang};
				$template->param(en_cours	=> 1 );

			} elsif  ($cmd->{etat} eq '4') {
				$show_submit_note 	 = $tmpl_labels->{repro_done_note}->{$lang};
				$submit_button_label = $tmpl_labels->{repro_done}->{$lang};
				$template->param(repro_action	=> 'done' );
			} elsif  ($cmd->{etat} eq '5') {
				$show_submit_note 	 = $tmpl_labels->{repro_archive_note}->{$lang};
				$submit_button_label = $tmpl_labels->{repro_archive}->{$lang};
				$template->param(repro_action	=> 'archive' );
			} else {
					$show_submit_button = 0;
			}

		}
	
	} elsif ( isAdmin() ) {
		if ( $cmd->{etat} le '2') {
			#	- select fond
			my $fonds = getFondsForUnits();
			my @fonds_loop;
			foreach my $fond (sort keys %$fonds) {
				push @fonds_loop, {
					fond_nb				=> $fond,
					fond_label		=> $fonds->{$fond},
					fond_selected => $cmd->{fond} eq $fond ? 'selected' : '',
				};
			}
			$template->param(fonds_loop	=> \@fonds_loop );

			$show_submit_note 	= $tmpl_labels->{commander}->{$lang};
			$show_submit_button = 1;
			$submit_button_label= $tmpl_labels->{commander}->{$lang};
		}
		$template->param(del_mod => 1 ) if $cmd->{etat} < 3;
	} else {
		if ($args->{update_cmd}) {
			$show_submit_note 	= $tmpl_labels->{dem_valid}->{$lang};
			$show_submit_button = 1;
			$submit_button_label= $tmpl_labels->{dem_valid}->{$lang};
		}
		$template->param(del_mod => 1 ) if $cmd->{etat} < 3;

		my $dest	= getAdminsEmails ($cmd->{scipertodo});
		$template->param(dest				=> $dest );

	}	
	$template->param(show_submit_button	=> $show_submit_button );
	$template->param(show_submit_note		=> $show_submit_note );
	$template->param(submit_button_label=> $submit_button_label );


	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub valid {

#warn "--> valid\n";
	my $cmd 		 = getCmd($args->{nocmd});
warn "--> valid cmd\n".Dumper($cmd);

	my ($msg, $subj, $dest, $submit_note);
	#	- update status 
	if ( isAdmin() ) {
		error('no_fund') unless $args->{fond};
		updateCmd ( {
			nocmd => $cmd->{nocmd},
			etat	=> '3',
			fond	=> $args->{fond},
		});
		# - notify repro
		$msg = qq{
	Demande de cartes de visite<br>
	BÃ©nÃ©ficiaire : $cmd->{firstname} $cmd->{name}<br>
	No. commande : <a href="https://$ENV{SERVER_NAME}/show?nocmd=$cmd->{nocmd}">$cmd->{nocmd}</a><br>
	ValidÃ©e par : $login->{name} $login->{firstname} [$login->{sciper}]<br>
		};
		$subj = qq{Commande de cartes de visite : $cmd->{nocmd}};
		$dest = $mailRepro;
		$submit_note = $tmpl_labels->{queue_note}->{$lang};
	} else {
		updateCmd ( {
			nocmd => $cmd->{nocmd},
			etat	=> '2',
		});

		$msg = qq{
	Demande de validation de cartes de visite<br>
	BÃ©nÃ©ficiaire : $cmd->{firstname} $cmd->{name}<br>
	No. commande : <a href="https://$ENV{SERVER_NAME}/show?nocmd=$cmd->{nocmd}">$cmd->{nocmd}</a><br>
		};
		$subj = qq{Validation de commande de cartes de visite : $cmd->{nocmd}};
		$dest = getAdminsEmails ($cmd->{scipertodo});

		$submit_note = qq{$tmpl_labels->{dem_valid_done_note}->{$lang}<br>$dest};

	}					 

warn "--> valid : dest=$dest\n";
warn "--> valid : $msg\n";

	   $cmd 		 = getCmd($args->{nocmd});
	my $template = initTempl ('show.tmpl', $cmd);

	$template->param(fond					=> $cmd->{fond} );
	$template->param(submit_note	=> $submit_note );
	$template->param(msg					=> $msg );
	$template->param(subj					=> $subj );
	$template->param(dest					=> $dest );

	mailto ($dest, $subj, $msg);

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub queue_OLD {

warn "--> queue\n";
	my $cmd 		 = getCmd($args->{nocmd});

	my $template 	 = initTempl ('queue.tmpl', $cmd);
	if (isAdmin()) {
		#	- select fond
		my $fonds = getFondsForUnits();
		my @fonds_loop;
		foreach my $fond (sort keys %$fonds) {
			push @fonds_loop, {
				fond_nb				=> $fond,
				fond_label		=> $fonds->{$fond},
				fond_selected => $cmd->{fond} eq $fond ? 'selected' : '',
			};
		}
		$template->param(fonds_loop	=> \@fonds_loop );
	} else {
		my $dest			 = getAdminsEmails ($cmd->{scipertodo});
		$template->param(dest				=> $dest );
	}

	my $submit_txt = isAdmin() ? $tmpl_labels->{commander}->{$lang} : $tmpl_labels->{dem_valid}->{$lang} ;
	$template->param(submit_txt	=> $submit_txt );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub encours {

warn "--> encours\n";
	error ('no_access') unless isReproStaff();
	my $cmd = updateCmd ( {
		nocmd => $args->{nocmd},
		etat	=> '4',
	});
	
	my $template 	 = initTempl ('show.tmpl', $cmd);

	$template->param(show_submit_note			=> $tmpl_labels->{repro_done_note}->{$lang} );
	$template->param(submit_button_label	=> $tmpl_labels->{repro_done}->{$lang} );
	$template->param(repro_action					=> 'done' );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub done {

warn "--> done\n";
	error ('no_access') unless isReproStaff();
	my $cmd = updateCmd ( {
		nocmd => $args->{nocmd},
		etat	=> '5',
	});

	my $msg  = qq{
English below
<br>
<br>
<br>Madame, Monsieur,
<br>
<br>Nous vous remercions pour votre commande.
<br>
<br>Les cartes de visites pour: XXX sont Ã  votre disposition.
<br>
<br>Nous vous invitons Ã  venir les retirer Ã  notre guichet qui est ouvert du lundi au jeudi de 8h30 Ã  11h00 et de 13h30 Ã  16h00.
<br>Le vendredi de 8h30 Ã  11h00 et de 13h30 Ã  15h00.
<br>
<br>Nous vous informons que les cartes de visite pour EPFL pour
<br>
<br>NeuchÃ¢tel sont envoyÃ©es Ã :
<ul>
<br>    EPFL STI IMT-GE
<br>    Mme JoÃ«lle Banjac
<br>    Case podstale 526
<br>    Rue de la MaladiÃ¨re 71b
<br>    2002 NeuchÃ¢tel
</ul>
<br>Sion sont envoyÃ©es Ã :
<ul>
<br>    EPFL Valais
<br>    Magasin ISIC / Mr Seydoux
<br>    Rte de lâIndustrie 17
<br>    Case postale 440
<br>    1950 Sion
</ul>
<br>Fribourg sont envoyÃ©es Ã :
<ul>
<br>    EPFL Fribourg
<br>    Passage du Cardinal 13B
<br>    Case postale 487
<br>    1701 Fribourg
</ul>
<br>GenÃ¨ve sont envoyÃ©es Ã :
<ul>
<br>    Fondation Campus Biotech Geneva
<br>    Mr. Roberto Lia
<br>    Chemin des Mines 9
<br>    1202 GenÃ¨ve
</ul>
<br>
<br>
<br>Meilleures salutations
<br>______________________
<br>
<br>
<br>Madam, Sir,
<br>
<br>We thank you for your order.
<br>
<br>The businesscards for XXX are at your disposal.
<br>
<br>We invite you to pick them up at our desk which is open from Monday to Thursday from 8:30 to 11:00 and from 13:30 to 16:00.
<br>Friday our desk is open from 8:30 to 11:00 and from 13:30 to 15:00.
<br>
<br>We inform you that business cards for EPFL
<br>
<br> NeuchÃ¢tel are sent to:
<ul>
<br>    EPFL STI IMT-GE
<br>    Mrs. JoÃ«lle Banjac
<br>    Case postale 526
<br>    Rue de la MaladiÃ¨re 71b
<br>    2002 NeuchÃ¢tel
</ul>
<br>Sion are sent to:
<ul>
<br>     EPFL Valais
<br>    Magasin ISIC / Mr. Seydoux
<br>    Rte de lâIndustrie 17
<br>    Case postale 440
<br>    1950 Sion
</ul>
<br>Fribourg are sent to:
<ul>
<br>    EPFL Fribourg
<br>    Passage du Cardinal 13B
<br>    Case postale 487
<br>    1701 Fribourg
</ul>
<br>Geneva are sent to:
<ul>
<br>    Fondation Campus Biotech Geneva
<br>    Mr. Roberto Lia
<br>    Chemin des Mines 9
<br>    1202 GenÃ¨ve
</ul>
<br>
<br>Kind regards
<br>
<br>Carinne Christinaz
<br>Tel.: 021 693 42 82
<br>E-mail: carinne.christinaz\@epfl.ch	
	};
	$msg =~ s/XXX/$cmd->{firstname} $cmd->{name}/g;
	my $dest = $cmd->{email};	
	my $subj = qq{Repro : votre commade de cartes de visite};
	mailto ($dest, $subj, $msg);
	
	my $template 	 = initTempl ('show.tmpl', $cmd);

	$template->param(show_submit_note			=> $tmpl_labels->{repro_done_note}->{$lang} );
	$template->param(submit_button_label	=> $tmpl_labels->{repro_done}->{$lang} );
	$template->param(repro_action					=> 'done' );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

sub getAdminsEmails {
	my $scipertodo = shift;
	return unless $scipertodo;

	my @persons = getPersons ($scipertodo);
	my $person = $persons[0];
	
	my $emails;
	my $admins;
	foreach my $unitid ( keys %{$person->{accreds}}) {
		map { 
			my @admins = $Persons->searchPersons ('sciper', $_->{persid});
			my $admin = $admins[0];
#warn "--> valid  $_->{persid}) admin\n".Dumper($admin);	
			$admins->{$_->{persid}} = {
				sciper 		=> $admin->{sciper},
				name 			=> $admin->{name},
				firstname => $admin->{firstname},
				email			=> $admin->{email},
			}	;
			$emails->{$admin->{email}} = 1;
		} $Rights->ListFirstRightAdmins ($droitCVIS, $unitid);
	}
	return join ",", keys %$emails;
}

#	-------------
sub list {

	my @cards_loop = $args->{etat} 
								 ? getCmdsByStatus($args->{etat})
								 : $args->{scipertodo}
								 	 ? getCmdsBySciper($args->{scipertodo})
								 	 : ();
warn "-->list : $args->{etat}, cards_loop\n".Dumper(@cards_loop);

	map { 
		if 			($_->{etat} eq '1') {	#	- en saisie
			if (isReproStaff()) {
				$_->{action} = 'show' ;
			} else {
				$_->{action} = 'edit';
			}
		} else {
			$_->{action} = 'show' ;
		} 
	} @cards_loop;
	my $template 	 = initTempl ('list.tmpl');
	$template->param(cards_loop	=> \@cards_loop);
	
	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub delcmd {
	error ("cmd_not_found") unless $args->{nocmd};
warn "-->del : $args->{nocmd}\n";
	my $cmd = getCmd($args->{nocmd});
	error ('cmd_not_found') unless $cmd->{nocmd};
	
	my $sql = qq{delete from cmds where nocmd=?};
	my $sth = $dbcards->query($sql, $cmd->{nocmd});
	error ('db_error') unless $sth;
	log ( {
			nocmd => $cmd->{nocmd},
			scipertodo => $cmd->{scipertodo},
			op => 'del',
			msg => "delete cmd : etat=$cmd->{etat}",
		}
	);
	if ($args->{notif}) {
		my $msg = qq{
		Bonjour,
<br>		
<br>Votre commande de cartes de visite $cmd->{nocmd} a Ã©tÃ© annulÃ©e par $login->{firstname} $login->{name}.
<br>Questions et support : $helpdesk
<br>
<br>		Hello,
<br>Your businesscard order $cmd->{nocmd} has been canceled by $login->{firstname} $login->{name}.
<br>Questions and support : $helpdesk
<br>
		};
		my $dest = $cmd->{email};	
		my $subj = qq{Repro : commande de cartes de visite annulÃ©e};
		mailto ($dest, $subj, $msg);
	}
	my $template = initTempl ('delcmd.tmpl', $cmd);
	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

sub mailto {
  my ($dest, $subj, $msg) = @_;

  my $sendmail = '/usr/sbin/sendmail';

  $dest			 	 = $mailRepro if $DEBUG;
  $dest 			 = 'ion.cionca@epfl.ch' if  $ENV{REMOTE_ADDR} eq '128.178.1.146';

  unless ($dest) {
		$subj .= qq{ **ERR : dest vide **}; 
		$dest  = 'ion.cionca@epfl.ch';
  }
  my $subject = encode_mimeword($subj);
  my $replyTo = 'noreply@epfl.ch';
  my $mailFrom= 'noreply@epfl.ch';
  my $mailCc	= 'ion.cionca@epfl.ch';
  
	utf8::encode ($msg);
	utf8::encode ($subject);

  eval {
  	open (MAIL, "| $sendmail -t -F$mailFrom -f$mailFrom") or return;
  	print MAIL qq{To: $dest\n};
  	print MAIL qq{Cc: $mailCc\n};
  	print MAIL qq{From: $mailFrom\n};
  	print MAIL qq{Reply-to: $replyTo
Subject: $subject
Content-type: text/html; charset=utf-8

$msg
};
  	close (MAIL);
  } or do {
  	warn "error in mailto [ $dest ] : $@\n"; 
  	return
  };

}

#--------
sub isReproStaff {
	return 1 if $repro_staff =~ /$login->{sciper}/;
	return 0;
}

#--------
sub isAdmin {
#warn "--> isAdmin adminUnits\n".Dumper($adminUnits);
	return 1 if scalar (keys %$adminUnits) > 0;
	return 0;
}

#--------
sub updateCmd {
	my $cmd = shift;
	
	my ($sql, @params, $nocmd);
	foreach my $field (keys %$cmd) {
		next if $field eq 'nocmd';
		$sql .= qq{$field=?, };
		push @params, $cmd->{$field};
	}
	$sql =~ s/, $//;
	if ($cmd->{nocmd}) {
		$nocmd = $cmd->{nocmd};
		$sql = qq{update cmds set $sql where nocmd=? };
	} else {
		$nocmd = getCmdNb();
		$sql = qq{insert into cmds set $sql, date = now(), nocmd	= ? };
	}
	push @params, $nocmd;

	my $sth = $dbcards->prepare($sql);
	error ('db_error') unless $sth;
	my $rv = $sth->execute(@params);
	error ('db_error') unless $rv;

	return getCmd($nocmd);

}

#--------
sub getAllCmdsByStatus {
	my $cmds;
	map { 
		$cmds->{$_->{etat}}++
	}  getCmdsByStatus();
	return $cmds;
}

#--------
sub getCmdsByStatus {
	my $etat = shift;
	my $sql = qq{select * from cmds };
		 $sql .= qq{ where etat=? } if ($etat) ;
	my @params = ($etat) if ($etat) ;
		 $sql .= qq{order by date desc};
	my $sth = $dbcards->query($sql, @params);
	my @cmds;
	while (my $cmd = $sth->fetchrow_hashref) {
#warn "--> getCmdsByStatus B : $cmd->{nocmd}, $cmd->{etat}, $cmd->{name}\n";	
		next unless canManage ($cmd->{scipertodo});
		utf8::encode ($cmd->{name});
		utf8::encode ($cmd->{firstname});
		$cmd->{status} = $cards_status->{$cmd->{etat}}->{$lang};
		push @cmds, $cmd;
	}
#warn "--> getCmdsByStatusB : cmds\n".Dumper(@cmds);	
	return @cmds;
}

#--------
sub getCmdsBySciper {
	my $scipertodo = shift;
warn "--> getCmdsBySciper : scipertodo=$scipertodo\n";
	return unless $scipertodo;

	my $sql = qq{select * from cmds where scipertodo=? order by date desc};
	my $sth = $dbcards->query($sql, $scipertodo);
	my @cmds;
	while (my $cmd = $sth->fetchrow_hashref) {
#warn "--> getUserCmds A : card\n".Dumper($cmd);	
		next unless canManage ($cmd->{scipertodo});
		utf8::encode ($cmd->{name});
		utf8::encode ($cmd->{firstname});
		$cmd->{status} = $cards_status->{$cmd->{etat}}->{$lang};
		push @cmds, $cmd;
	}
#warn "--> getCmdsByStatusB : cmds\n".Dumper(@cmds);	
	return @cmds;
}

#--------
sub getUserCmds {
	my $scipertodo = shift;
warn "--> getUserCmds : $scipertodo\n";	
	
	my $sql = qq{select * from cmds where scipertodo=? order by date desc};
	my $sth = $dbcards->query($sql, $scipertodo);
	my @cmds;
	while (my $cmd = $sth->fetchrow_hashref) {
		$cmd->{status} = $cards_status->{$cmd->{etat}}->{$lang};
		push @cmds, $cmd;
	}
	return @cmds;
}

#--------
sub getCmd {
	my $nocmd  = shift;
#warn "--> getCmd : $nocmd\n";	
	error ("cmd_not_found") unless $nocmd;
	
	my $cmd;
	if ($nocmd) {
		my $sql = qq{select * from cmds where nocmd=?};
		my $sth = $dbcards->query($sql, $nocmd);
			 $cmd = $sth->fetchrow_hashref;
	}

	error ("cmd_not_found") unless defined $cmd->{nocmd};
	map { utf8::encode ($cmd->{$_}) } keys %$cmd;
	return $cmd;
}

#--------
sub makeCardFromDinfo {
	my $person = shift;
	error ('person_not_found') unless $person->{sciper};

	my $unitid 		 = $args->{unitid};
warn "--> getCmd : person\n".Dumper($person);	
	
	my $accred;
	if ( $unitid ) {
		$accred = $person->{accreds}->{$unitid};
	} else {
		map { $accred = $person->{accreds}->{$_} if $person->{accreds}->{$_}->{ordre} eq '1' } keys %{$person->{accreds}};
	}

	my $cmd = {
		etat			=> '1',
		quantite	=> '50',
		card_type	=> 'adresse',
		scipertodo=> $person->{sciper},

		path1			=> $accred->{path1},
		path2			=> $accred->{path2},
		path3			=> $accred->{path3},
		fonction1	=> $accred->{fonction},
		name			=> $person->{name},
		firstname	=> $person->{firstname},
		email			=> $person->{email},
		phone1		=> $accred->{bottin}->{phones}->[0],
		phone2		=> $accred->{bottin}->{phones}->[1],
		adresse		=> $accred->{bottin}->{adresse},
	};

	$cmd->{card_type} = 'adresse';
	
	return $cmd;
	
}

#--------
sub log {
	my $params = shift;
warn "--> log : params\n".Dumper($params);
	return unless $params;
	my $scipertodo = $params->{scipertodo};
	my $op 				 = $params->{op};
	my $msg 			 = $params->{msg};
	my $sql = qq{insert into logs set
		sciper		 = ?,
		scipertodo = ?,
		op				 = ?,
		msg				 = ?
	};
	my $sth = $dbcards->query($sql, ($login->{sciper}, $params->{scipertodo}, $params->{op}, $params->{msg}));
	error ('db_error') unless $sth;
}


#	-------------
sub setTmplParam {
	my ($template, $name, $value) = @_;
	$template->param($name					=> $value);
	$template->param($name.'_alert'	=> 'class="oversize"') if length($value) > $MAX_SIZE;
}

#	-------------
sub initTempl {
	my ($tmplpath, $cmd) = @_;
warn "--> initTempl : $tmplpath\n";	
	
	error ('init_templ') unless $tmplpath;
	
	my $template = HTML::Template->new(
		filename 					=> "$tmpldir/$tmplpath",
		strict 						=> 0,
		cache 						=> 1,
		global_vars 			=> 1,
		utf8 							=> 1,
    die_on_bad_params => 0,
	) or die "err : $!";

	foreach my $label ( keys %$tmpl_labels) {
		$template->param("$label"	=> $tmpl_labels->{$label}->{$lang} );
	}
	
	$template->param(path_info  		 => $ENV{PATH_INFO});
	$template->param(lang				 		 => $lang );
	$template->param(browser_EN 		 => $lang eq 'en' );
	$template->param(browser_FR 		 => $login->{name}) ;
	$template->param(login_sciper		 => $login->{sciper}) ;
	$template->param(login_name			 => $login->{name}) ;
	$template->param(login_firstname => $login->{firstname}) ;
	$template->param(isAdmin				 => 1) if isAdmin() || isReproStaff();
	$template->param(isReproStaff		 => 1) if isReproStaff();
	$template->param(update_cmd			 => $args->{update_cmd});

	my $cmdsByStatus	= getAllCmdsByStatus () if isReproStaff() || isAdmin();
	my @status_loop;
	foreach my $status_id (sort { $a <=> $b } keys %$cards_status) {
		push @status_loop, {
				status_id			=> $status_id,
				status_nb			=> $cmdsByStatus->{$status_id},
				status_label	=> $cards_status->{$status_id}->{$lang},
		};
	}
	$template->param(status_loop		 => \@status_loop);

	return $template unless $cmd;
#warn "--> initTempl : card\n".Dumper($cmd);	

	my $mailid;
	if ( $cmd->{email} =~/([^@]*)@(.*)$/) {
		$mailid = $1;
	}
	my $path1_img = $cmd->{path1_hide} ? '/images/eye-off.png'		: '/images/eye.png';
	my $path2_img = $cmd->{path2_hide} ? '/images/eye-off.png'		: '/images/eye.png';
	my $path3_img = $cmd->{path3_hide} ? '/images/eye-off.png'		: '/images/eye.png';

	my $line4	= $cmd->{card_type} eq 'adresse'
						? $cmd->{adresse} 
						: $cmd->{card_type} eq 'people'
							? 'https://people.epfl.ch/'.$mailid
							: $cmd->{card_type} eq 'web'
								? $cmd->{web}
								: '';
	$template->param(status_input				=> 1 ) if $cmd->{etat}  eq '1';
	$template->param(status_validation	=> 1 ) if $cmd->{etat}  eq '2';
	$template->param(status_queue				=> 1 ) if $cmd->{etat}  eq '3';
	$template->param(status_processing	=> 1 ) if $cmd->{etat}  eq '4';
	$template->param(status_done				=> 1 ) if $cmd->{etat}  eq '5';
	$template->param(status_archive			=> 1 ) if $cmd->{etat}  eq '6';

	$template->param(card_type 					=> $cmd->{card_type} );
	$template->param(nocmd			 				=> $cmd->{nocmd} );
	$template->param(etat				 				=> $cmd->{etat} );
	$template->param(fond				 				=> $cmd->{fond} );
	$template->param(status			 				=> $cards_status->{$cmd->{etat}}->{$lang} );

	$template->param(resp				 				=> $cmd->{resp} );
	$template->param(quantite		 				=> $cmd->{quantite} );
	$template->param(date				 				=> $cmd->{date} );
	$template->param(scipertodo	 				=> $cmd->{scipertodo} );
	$template->param(mailid							=> $mailid );
	$template->param(path1_hide					=> $cmd->{path1_hide} );
	$template->param(path2_hide					=> $cmd->{path2_hide} );
	$template->param(path3_hide					=> $cmd->{path3_hide} );
	$template->param(path1_img					=> $path1_img );
	$template->param(path2_img					=> $path2_img );
	$template->param(path3_img					=> $path3_img );
	$template->param(comments						=> $cmd->{comments} );

	my @quant_loop;
	my $prices_list;
	foreach my $quant (sort {$a <=> $b} keys %prices) {
		my $selected =  $cmd->{quantite} eq $quant ? 'selected' : '';
		push @quant_loop, {
			quantite	=> $quant,
			selected	=> $selected,
		};
		$prices_list .= qq{$quant pc Frs $prices{$quant}, };
	}
	$prices_list =~ s/, $//;
	$template->param(quant_loop				=> \@quant_loop ) ;
	$template->param(prices_list			=> $prices_list ) ;

	setTmplParam ($template, 'name', 			$cmd->{name});
	setTmplParam ($template, 'firstname', $cmd->{firstname});
	setTmplParam ($template, 'path1', 		$cmd->{path1});
	setTmplParam ($template, 'path2', 		$cmd->{path2});
	setTmplParam ($template, 'path3', 		$cmd->{path3});
	setTmplParam ($template, 'path4', 		$cmd->{path4});
	setTmplParam ($template, 'fonction1', $cmd->{fonction1});
	setTmplParam ($template, 'fonction2', $cmd->{fonction2});
	setTmplParam ($template, 'phone1', 		$cmd->{phone1});
	setTmplParam ($template, 'phone2', 		$cmd->{phone2});
	setTmplParam ($template, 'email', 		$cmd->{email});
	setTmplParam ($template, 'adresse', 	$cmd->{adresse});
	setTmplParam ($template, 'web', 			$cmd->{web});
	setTmplParam ($template, 'line4', 		$line4);

	return $template;

}

sub chkActionByStatus {
	my ($cmd, $action) = @_;
	return unless $cmd && $action;

	if 			($cmd->{etat} eq '1') {
			return 1 if $action =~ /(edit|)/;
	} elsif ($cmd->{etat} eq '2') {
	} elsif ($cmd->{etat} eq '3') {
	} elsif ($cmd->{etat} eq '4') {
	} elsif ($cmd->{etat} eq '5') {
	} elsif ($cmd->{etat} eq '6') {
	} else {
	}
	
}

#--------
sub chkArgs {
	my ($args) = @_;
	
	my $errmsg;
	foreach my $name (keys %$args) {
		next unless $name;
		my $value = $args->{$name};
		if ($name =~ /^(lang|card_lang)$/i) {
			unless ($value =~ /^(en|fr|)$/i) {
				$errmsg = 'wrong_params';
			}
		}
		if ($name =~ /^(sciper)$/i) {
			unless ($value =~ /^\d{6}$/) {
				$errmsg = 'wrong_params';
			}
		}
# 		if ($name =~ /^(nocmd)$/i) {
# 			unless ($value =~ /^(A-Z0-9))$/) {
# 				$errmsg = "People::params : illegal params";
# 			}
# 		}

		$value =~ s/\\a/a/ig;
		$value =~ s/\\a/a/ig;
		$value =~ s/\\b/b/ig;
		$value =~ s/\\c/c/ig;
		$value =~ s/\\d/d/ig;
		$value =~ s/\\e/e/ig;
		$value =~ s/\\f/f/ig;
		$value =~ s/\\j/j/ig;
		$value =~ s/\\k/k/ig;
		$value =~ s/\\l/l/ig;
		$value =~ s/\\o/o/ig;
		$value =~ s/\\p/p/ig;
		$value =~ s/\\r/r/ig;
		$value =~ s/\\s/s/ig;
		$value =~ s/\\t/t/ig;
		$value =~ s/\\u/u/ig;
		$value =~ s/\\v/v/ig;
		$value =~ s/\\x/x/ig;
		$value =~ s/\\y/y/ig;

		#	- URI decode
		$value =~ s/\+/ /g; $value =~ s/&#([A-Fa-f\d]+);/chr $1/eg;
		
		checkJSExploits ($value);

		#	- escape HTML 
		$value =~ s#&#&amp;#g;
		$value =~ s#<#&lt;#g;
		$value =~ s#>#&gt;#g;
		$value =~ s#"&#&quot;#g;

	}
	
	error ($errmsg) if 	$errmsg;

}

#___________________
sub checkJSExploits {
	my $value = shift;
	return unless $value;

	# - check JS CSS vulnerabilty
	my $exploittxt = qq{content refused, potential malware or illegal keywords found} ;
	my @exploits1 = ('FRAME','OBJECT','META','APPLET','LINK','IFRAME');
	# - check JS events vulnerabilty
	my @exploits2 = (
		'onblur',
		'onchange',
		'onclick',
		'oncopy',
		'oncut',
		'ondblclick',
		'ondrag',
		'ondrop',
		'onerror',
		'onfocus',
		'onkey',
		'onkeypress',
		'onload',
		'onmouse',
		'onpaste',
		'onreset',
		'onresize',
		'onsearch',
		'onselect',
		'onsubmit',
		'onunload',
		'oncontext',
		'oninput',
		'oninvalid',
	);
	my @exploits3 = (
		'script',
		'style',
		'javascript',
		'audio',
		'video',
	);

	$value =~ s/\\a/a/ig;
	$value =~ s/\\a/a/ig;
	$value =~ s/\\b/b/ig;
	$value =~ s/\\c/c/ig;
	$value =~ s/\\d/d/ig;
	$value =~ s/\\e/e/ig;
	$value =~ s/\\f/f/ig;
	$value =~ s/\\j/j/ig;
	$value =~ s/\\k/k/ig;
	$value =~ s/\\l/l/ig;
	$value =~ s/\\o/o/ig;
	$value =~ s/\\p/p/ig;
	$value =~ s/\\r/r/ig;
	$value =~ s/\\s/s/ig;
	$value =~ s/\\t/t/ig;
	$value =~ s/\\u/u/ig;
	$value =~ s/\\v/v/ig;
	$value =~ s/\\x/x/ig;
	$value =~ s/\\y/y/ig;

	#	- URI decode
	$value =~ s/\+/ /g; $value =~ s/&#([A-Fa-f\d]+);/chr $1/eg;
	$value =~ s/\\//g;

	foreach my $exploit (@exploits1) {
		 error ('wrong_params') if ($value =~ m#<\s*$exploit[^>]*>#i) ;
	}

	foreach my $exploit (@exploits2) {
		 if ($value =~ /\b$exploit(enter|up|down|over|out|press)?\s?=/i) {
warn " ** ERR JS EXPLOIT 2 : exploit=$exploit\n";		   
				error ('wrong_params');
		 }
	}

	foreach my $exploit (@exploits3) {
		 if ($value =~ m#<\s*$exploit[^>]*>#i) {
warn " ** ERR JS EXPLOIT 3 : exploit=$exploit\n";		   
				error ('wrong_params');
		 }
	}

}

#--------
sub getCmdNb {
	my @chars = ("A".."Z");
	my $string;
	$string .= $chars[rand @chars] for 1..8;
	return $string.time;
}

#--------
sub error {
	my $msg = shift;
warn "--> error : msg=$msg\n";
	return unless $tmpl_labels->{$msg};
	my $template = initTempl ('error.tmpl');
	$template->param( errmsg	=> $tmpl_labels->{$msg}->{$lang} );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;

}

#--------
sub authenticate {
  unless ($tequila) {
		$tequila = new Tequila::Client (
			service    => 'Businesscards',
			request    => [ 'uniqueid', 'allunits' ],
			identities => 'any',
			urlaccess  => "https://$ENV{SERVER_NAME}$ENV{REQUEST_URI}?$ENV{QUERY_STRING}",
		);
    $tequila->init ();
  } 

  $tequila->authenticate ();
  $login->{sciper} 	 = $tequila->{attrs}{uniqueid};

	#	- 
# 	$login->{sciper} = '276008';
# 	$login->{sciper} = '239809';
# 	$login->{sciper} = '239809';
# 	$login->{sciper} = '188475';
# 	$login->{sciper} = '167714';	#	- m. videlier

	$login = $Persons->getPerson ( $login->{sciper} );
	utf8::encode ($login->{name});
	utf8::encode ($login->{firstname});

	my $has_statut_perso;
	map { 
		$has_statut_perso = 1 if ($_->{statusid} eq '1' );
	} $Accreds->getAccreds ($login->{sciper});
	error ('no_access') unless $has_statut_perso;
warn "--> authenticate : $login->{name}, $login->{firstname}\n"; 
  
  $adminUnits = $Accreds->getAllUnitsWhereHasRight($login->{sciper}, 'cartevisite');
#warn "--> 0 authenticate : $login->{sciper}, adminUnits\n".Dumper($adminUnits); 
	map { delete $adminUnits->{$_} if $adminUnits->{$_} =~ /n/g; } keys %$adminUnits;
#warn "--> 1 authenticate : $login->{sciper}, adminUnits\n".Dumper($adminUnits); 
	#	- 
	$usersToManage = getPersonsFromUnits(keys %$adminUnits );
#warn "--> 2 authenticate : usersToManage\n".Dumper($usersToManage); 

}

#--------
sub getPersonsFromUnits {
	my (@unitsids) = @_;
#warn "--> getPersonsFromUnits : @unitsids\n";

	my @persons;
	foreach my $unitid (@unitsids) {

		my $sql = qq{
			select persid
				from accred.accreds
				join dinfo.unites on accreds.unitid = dinfo.unites.id_unite
			 where (accreds.debval is NULL or accreds.debval <= now())
				 and (accreds.finval is NULL or accreds.finval  > now())
				 and unitid = ?
				 and unitid < 50000
				 and statusid = 1
		};
		my $sth = $dinfodb->query ($sql, $unitid);
		my $persids = $sth->fetchall_arrayref ([0]);
		push @persons, map { $_->[0] } @$persids;

	}
	my $persons;
	map { $persons->{$_} = 1 } @persons;
#warn "--> getPersonsFromUnits\n".Dumper($persons);

	return $persons;
}

#--------
sub canManage {
	my $scipertodo = shift;
	
	map {
		if ($_->{statusid} eq '1') {
			return 1 if $login->{sciper} eq $scipertodo;
			return 1 if isReproStaff();
			return 1 if defined $adminUnits->{$_->{unitid}}  ;
		}
	} $Accreds->getAccreds($scipertodo);
#	return 0 unless $usersToManage->{$scipertodo};

	return 0;

}

#--------
sub getFondsForUnit {
	my $unitid = shift;
	my $sql = qq{
	select no_fond, fonds.libelle, unit_id 
	from dinfo.unites 
	left join difo.fonds on concat('F',unites.cf)=fonds.cf
	where 
			etat='O' and
			id_unite=?
	};
	my $sth = $dinfodb->query($sql, $unitid);
	my $fonds;
	while (my $data = $sth->fetchrow_hashref) {
		$fonds->{$unitid}->{$data->{no_fond}} = $data->{libelle}
	}
	return $fonds;
}

#--------
sub getFondsForUnits {

	my $unitsids = join ",", keys %$adminUnits;
warn "--> getFondsForUnits : unitsids=$unitsids\n";
	my $sql = qq{
	select no_fond, fonds.libelle, id_unite 
	from dinfo.unites 
	left join dinfo.fonds on concat('F',unites.cf)=fonds.cf
	where 
			etat='O' and
			id_unite in (?)
	};
	
	my $sth = $dinfodb->query($sql, $unitsids);
	my $fonds;
	while (my $data = $sth->fetchrow_hashref) {
#	- fonds by unit
#		$fonds->{$data->{id_unite}}->{$data->{no_fond}} = $data->{libelle};

#	- all fonds
 		utf8::encode ($data->{libelle});
		$fonds->{$data->{no_fond}} = $data->{libelle};
	}
warn "--> getFondsForUnits\n".Dumper($fonds);
	return $fonds;
	
}

#--------
sub getPersons {
	my $key 		= shift;
	
warn "--> getPersons : key=$key\n";
	return unless $key;

	my $sth;
	if ( $key=~ /\d\d\d\d\d\d/) {
		my $sql = qq{
		select 
			 dinfo.sciper.sciper,
			 dinfo.sciper.nom_acc  		 as name,
			 dinfo.sciper.prenom_acc   as firstname,
			 dinfo.sciper.nom_usuel    as nameus,
			 dinfo.sciper.prenom_usuel as firstnameus,
			 dinfo.sciper.sexe         as sex,
			 dinfo.emails.addrlog      as email
		from dinfo.sciper
		left join dinfo.accounts	on dinfo.sciper.sciper = dinfo.accounts.sciper
		left join dinfo.emails	on dinfo.sciper.sciper = dinfo.emails.sciper
		where accounts.user is not null
			and dinfo.sciper.sciper = ?
		};
		$sth = $dinfodb->query ($sql, $key);

	} else {
		my $sql = qq{
		select 
			 dinfo.sciper.sciper,
			 dinfo.sciper.nom_acc  		 as name,
			 dinfo.sciper.prenom_acc   as firstname,
			 dinfo.sciper.nom_usuel    as nameus,
			 dinfo.sciper.prenom_usuel as firstnameus,
			 dinfo.sciper.sexe         as sex,
			 dinfo.emails.addrlog      as email
		from dinfo.sciper
		left join dinfo.accounts	on dinfo.sciper.sciper = dinfo.accounts.sciper
		left join dinfo.emails		on dinfo.sciper.sciper = dinfo.emails.sciper
		where accounts.user is not null
			 and ( 	 dinfo.sciper.nom_acc like ? 
			 			or dinfo.sciper.nom_usuel like ? 
					 )
		order by name, firstname
		};
		$sth = $dinfodb->query ($sql, $key.'%', $key.'%');
	}

	my @persons;
	while (my $data = $sth->fetchrow_hashref) {
		next unless canManage ($data->{sciper});
warn "--> $data->{sciper}\n";	
 		utf8::encode ($data->{name});
 		utf8::encode ($data->{firstname});

		push @persons, $data;
	}
	error('person_not_found') unless scalar @persons;

  warn "--> getPersons persons\n".Dumper(@persons);
  warn "--> getPersons persons found=".scalar (@persons);
	
	#	- multiple finds
	if (scalar (@persons) > 1) {
		return @persons;
	}
warn "--> getPersons found one\n";
	
	my $person = $persons[0];
	
	$person->{name} 		 = $person->{nameus} 			if $person->{nameus};
	$person->{firstname} = $person->{firstnameus} if $person->{firstnameus};
	my $bottin;
	my $sql = qq{select distinct dinfo.annu.*, dinfo.adrspost.adresse from
		dinfo.annu left join dinfo.adrspost on annu.sciper=adrspost.sciper
		where adrspost.unite=annu.unite and annu.sciper=? 
	};
	my $sth = $dinfodb->query($sql, $person->{sciper});
	while (my $item = $sth->fetchrow_hashref) {
		push @{$bottin->{$item->{unite}}->{rooms}}, {
			room_abr	=> $item->{local},
		};
		push @{$bottin->{$item->{unite}}->{phones}}, norm_phone($item->{telephone1}) if $item->{telephone1};
		push @{$bottin->{$item->{unite}}->{phones}}, norm_phone($item->{telephone2}) if $item->{telephone2};
 		my @adr = split / \$ /, $item->{adresse};
 		$adr[1] =~ s/ \(.*\)//;
 		$bottin->{$item->{unite}}->{adresse}  = qq{$adr[1], $adr[2], $adr[3]};
	}
#warn "--> getPersons bottin\n".Dumper($bottin);
	
  my $sql = qq{
    select accred.accreds.unitid  as unitid,
				accred.accreds.ordre     	as ordre,
				accred.accreds.statusid  	as status,
				accred.positions.labelfr  as fonctionfr,
				accred.positions.labelxx  as fonctionxx,
				accred.positions.labelen  as fonctionen,
				path3.libelle     				as libelle3fr,
				path3.libelle_en  				as libelle3en,
				path2.libelle     				as libelle2fr,
				path2.libelle_en  				as libelle2en,
        path1.libelle 						as libelle1fr,
				path1.libelle_en  				as libelle1en
      from accred.accreds
           join dinfo.allunits as path3  on path3.id_unite = accred.accreds.unitid
           join dinfo.allunits as path2  on path2.id_unite = path3.level3
           join dinfo.allunits as path1  on path1.id_unite = path3.level2
           
           left outer join accred.positions on   accred.positions.id = accred.accreds.posid
     where accred.accreds.persid = ?
       and accred.accreds.debval < now()
       and (accred.accreds.finval is null or accred.accreds.finval > now())
     order by ordre;
  };
	my $sth = $dinfodb->query ($sql, $person->{sciper});
	my $accreds;
	while ( my $data = $sth->fetchrow_hashref ) {
		my $accred = {
			unitid	=> $data->{unitid},
			ordre		=> $data->{ordre},
			status	=> $data->{status},
			bottin	=> $bottin->{$data->{unitid}},
		};

		if ($card_lang eq 'fr') {
			$accred->{path1} = $data->{libelle1fr};
			$accred->{path2} = $data->{libelle2fr};
			$accred->{path3} = $data->{libelle3fr};
			$accred->{fonction} = $person->{sex} eq 'F' 
												 ? $data->{fonctionxx}
													 ? $data->{fonctionxx}
													 : $data->{fonctionfr}
												 : $data->{fonctionfr};
		} else {
			$accred->{path1} = $data->{libelle1en};
			$accred->{path2} = $data->{libelle2en};
			$accred->{path3} = $data->{libelle3en};
			$accred->{fonction} = $data->{fonctionen}
													 ? $data->{fonctionen}
													 : $data->{fonctionfr};
		}		

		utf8::encode ($accred->{path1});
		utf8::encode ($accred->{path2});
		utf8::encode ($accred->{path3});
		utf8::encode ($accred->{fonction});


		$accreds->{$data->{unitid}} = $accred;
	} 

	return (
		{
		sciper		=> $person->{sciper},
		name			=> $person->{name},
		firstname	=> $person->{firstname},
		sex				=> $person->{sex},
		email			=> $person->{email},
		accreds		=> $accreds,
		} );

}

#--------
sub norm_phone {
	my $phone = shift;
	return unless $phone;
	if (length ($phone) > 5) {
		if ($phone =~ /^00/) {
		} elsif ($phone =~ /^0/) {
			my $zone = substr ($phone, 1, 2);
			$phone =~ s/^0$zone//;
			$phone = "+41 $zone ".$phone;
		}
		return $phone;
	} else {
		return qq{+41 21 69 $phone};
	}
}

#	
# CREATE TABLE `businesscard.cmds` (
#   `nocmd` varchar(20) CHARACTER SET utf8 NOT NULL,
#   `card_type` varchar(10) CHARACTER SET utf8 DEFAULT 'adresse',
#   `date` datetime NOT NULL,
#   `resp` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
#   `etat` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
#   `quantite` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
#   `scipertodo` varchar(10) CHARACTER SET utf8 NOT NULL,
#   `cf` varchar(10) CHARACTER SET utf8 NOT NULL,
#   `fond` varchar(20) CHARACTER SET utf8 NOT NULL,
#   `path1` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `path1_hide` char(1) CHARACTER SET utf8 DEFAULT NULL,
#   `path2` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `path2_hide` char(1) CHARACTER SET utf8 DEFAULT NULL,
#   `path3` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `path3_hide` char(1) CHARACTER SET utf8 DEFAULT NULL,
#   `path4` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `title` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
#   `fonction1` varchar(32) CHARACTER SET utf8 DEFAULT NULL,
#   `fonction2` varchar(32) CHARACTER SET utf8 DEFAULT NULL,
#   `adresse` varchar(43) CHARACTER SET utf8 DEFAULT NULL,
#   `phone1` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `phone2` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `web` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `obs` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
#   `operator` varchar(10) CHARACTER SET utf8 DEFAULT NULL,
#   `name` varchar(40) CHARACTER SET utf8 NOT NULL,
#   `firstname` varchar(40) CHARACTER SET utf8 NOT NULL,
#   `email` varchar(40) CHARACTER SET utf8 DEFAULT NULL,
#   `comments` varchar(255) CHARACTER SET utf8 DEFAULT NULL,
#   PRIMARY KEY (`nocmd`),
#   UNIQUE KEY `nocmd_UNIQUE` (`nocmd`)
# ) ENGINE=MyISAM DEFAULT CHARSET=utf8

