#!/usr/bin/perl --
#
#  [ businesscard ]
#
#  Copyright 2019 Ecole Polytechnique Federale de Lausanne (EPFL)
#
#  Author:  Ion CIONCA [ion.cionca@epfl.ch][April 2019]
#
#_________________________________________________________________

use lib '/opt/dinfo/lib/perl';
use utf8;
use strict;
use Data::Dumper;
use Mail::Sendmail;
use HTML::Template;
use MIME::Words qw(:all);

use Tequila::Client;
use Cadi::CadiDB;
use Cadi::Accreds;
use Cadi::WSUtils;
use Cadi::Persons;
use Accred::Rights;

use vars qw( $tequila $tmpl_labels $adminUnits $login $show_alert $adminFonds $usersToManage);
require 'tmpl_labels.inc';	

	my $droitCVIS		= '11';
	my $helpdesk		= '1234@epfl.ch';
	my $repro_staff     = '104782,147506,104732,126981,178145,268229,316897,169419';
	my $mailRepro		= 'carinne.christinaz@epfl.ch,roland.chabloz@epfl.ch,thomas.reynaud@epfl.ch,anne-sylvie.borter@epfl.ch,stephanie.kobi@epfl.ch';
	my $mailRepro		= 'carinne.christinaz@epfl.ch';

	my $verbose			= 0;

	my $cards_status = {
		'1'	=> {
			fr => qq{saisie},
			en => qq{input},
			},
		'2'	=> {
			fr => qq{attente repro},
			en => qq{repro queue},
			},
		'3'	=> {
			fr => qq{en cours},
			en => qq{processing},
			},		
		'4'	=> {
			fr => qq{termin&eacute;e},
			en => qq{processed},
			},		
		'5'	=> {
			fr => qq{facturée},
			en => qq{billed},
			},		
	};
	my %prices 		= (
		'50',		'15.-',
		'100',	'25.-',
		'200',	'30.-',
		'300',	'35.-',
	);

my $FACULTES = {
	ENAC => {
		fr	=> [ qq{Faculté de l'environnement naturel,}, qq{architectural et construit}, ],
		en	=> [ qq{School of Architecture, Civil and}, qq{Environmental Engineering}, ],
	}, 
	STI => {
		fr	=> [ qq{Faculté des sciences et techniques}, qq{de l'ingénieur}, ],
		en	=> [ qq{School of Engineering}, ],
	}, 
	SB => {
		fr	=> [ qq{Faculté des sciences de base}, ],
		en	=> [ qq{School of Basic Sciences}, ],
	}, 
	SV => {
		fr	=> [ qq{Faculté des sciences de la vie}, ],
		en	=> [ qq{School of Life Sciences}, ],
	}, 
	IC => {
		fr	=> [ qq{Faculté informatique et communications}, ],
		en	=> [ qq{School of Computer and Communication}, qq{Sciences}, ],
	}, 
};

	my $MAX_SIZE 			= 60;
	my $MAX_SIZE_ADDR	= 43;
	my $MAX_SIZE_ADDR	= 80;
	
	my $tmpldir				= '/var/www/private/tmpl';
	my $DEBUG 	  		= -f '/opt/dinfo/etc/MASTER' ? 0 : 1;
	binmode (STDOUT, ':utf8');

	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
	$mon++;
	$year += 1900;

	my $dbcards  = new Cadi::CadiDB ( dbname => 'businesscard',	utf8 => 1, );
	my $dinfodb  = new Cadi::CadiDB ( dbname => 'dinfo',				utf8 => 1, );
	my $Accreds  = new Cadi::Accreds ();
	my $Persons	 = new Cadi::Persons (utf8 => 1);
	my $Rights	 = new Accred::Rights ();

	my $req 		 = Cadi::WSUtils::loadreq ();
	my $args 		 = $req->{args};
		
	chkArgs ($args);
	
	my $cookie_lang = getCookie('lang');
	my $lang 	 	 = $args->{lang} 			
							 ? $args->{lang} 		 
							 : $cookie_lang
							 		? $cookie_lang
							 		: 'en';
	setCookie('lang', $lang);
	my $card_lang = $args->{card_lang} ? $args->{card_lang} : $lang;

	authenticate();
	if ($args->{scipertodo}) {
		error ('no_rights') unless canManage ($args->{scipertodo});
	} else {
	}
	
	if ($ENV{PATH_INFO} =~ /^\/edit$/)			{	edit	(); }
	if ($ENV{PATH_INFO} =~ /^\/show$/)			{	show	(); }
	if ($ENV{PATH_INFO} =~ /^\/valid$/)			{	valid	(); }
	if ($ENV{PATH_INFO} =~ /^\/queue$/)			{	queue	(); }
	if ($ENV{PATH_INFO} =~ /^\/encours$/)		{	encours	(); }
	if ($ENV{PATH_INFO} =~ /^\/done$/)			{	done	(); }
	if ($ENV{PATH_INFO} =~ /^\/donem$/)			{	donem	(); }
	if ($ENV{PATH_INFO} =~ /^\/archive$/)		{	archive	(); }
	if ($ENV{PATH_INFO} =~ /^\/delcmd$/)		{	delcmd	(); }
	if ($ENV{PATH_INFO} =~ /^\/list$/) 			{	list	(); }
	if ($ENV{PATH_INFO} =~ /^\/copy$/) 			{	copy	(); }
	
	main ();

exit;

#	-------------
sub main {

	my $template;

warn "--> main scipertodo=$args->{scipertodo}\n" if $verbose;		
	
	if ($args->{scipertodo}) {
		my @persons = getPersons ($args->{scipertodo});
		error ('person_not_found') unless scalar @persons;
warn "--> main persons : scipertodo=$args->{scipertodo}\n".Dumper(@persons) if $verbose;		
		if (scalar @persons == 1) {
			my $person = $persons[0];
			
			my @cards_loop = getCmdsBySciper ($person->{sciper});

			$template = initTempl ('main.tmpl');

			$template->param(scipertodo	=> $person->{sciper});
			$template->param(name				=> $person->{name});
			$template->param(firstname	=> $person->{firstname});
			$template->param(cards_loop	=> \@cards_loop);

		} else {
			$template = initTempl ('search.tmpl');
			$template->param(personsloop	=> \@persons);
		}
	} else {
			$template = initTempl ('main.tmpl');
	}
	
	print "Content-Type: text/html; charset=utf-8\n\n";

	print $template->output;
	exit;
}

#	-------------
sub edit {
	
	my $cmd;
	my $person;
	if ($args->{nocmd}) {
 		$cmd 				=  getCmd($args->{nocmd});
		show() if $cmd->{etat} =~ /(3|4|5)/;
		my $fond		= $cmd->{fond};
		my $etat		= $cmd->{etat};
		my @persons = getPersons ($cmd->{scipertodo});
		$person 		= $persons[0];
		if ($args->{unitid}) {
			$cmd 					= makeCardFromDinfo($person);
			$cmd->{nocmd} = $args->{nocmd};
			$cmd->{etat} 	= $etat;
			$cmd->{fond} 	= $fond;
		}
	} else {
		$args->{scipertodo} = $login->{sciper} unless $args->{scipertodo};
		my @persons = getPersons ($args->{scipertodo});
		$person 		= $persons[0];
		$cmd 				= makeCardFromDinfo($person);
	}
	my $template 		 = initTempl ('edit.tmpl', $cmd);

	my @accreds_loop;
	map {
		$person->{accreds}->{$_}->{scipertodo} = $cmd->{scipertodo};
		$person->{accreds}->{$_}->{nocmd} 		 = $cmd->{nocmd};
		$person->{accreds}->{$_}->{unitid} 		 = $_;
		$person->{accreds}->{$_}->{card_lang}  = $card_lang;
		push @accreds_loop, $person->{accreds}->{$_};
	} sort { $person->{accreds}->{$a}->{ordre} <=> $person->{accreds}->{$b}->{ordre} } keys %{$person->{accreds}};
	$template->param(accreds_loop	=> \@accreds_loop );

	$template->param(card_type_adresse	=> 'selected' ) if $cmd->{card_type} eq 'adresse';
	$template->param(card_type_people		=> 'selected' ) if $cmd->{card_type} eq 'people';
	$template->param(card_type_web			=> 'selected' ) if $cmd->{card_type} eq 'web';

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub show {

	my $cmd;
	if ( $args->{save_cmd} ) {
		error ('no_fund') 	unless $args->{fond};
		error ('no_rights') unless canManage ($args->{scipertodo});

		$cmd = updateCmd (
				{
						nocmd				=> $args->{nocmd},
						resp				=> $args->{resp},
						etat				=> '1',
						card_type		=> $args->{card_type},
						quantite		=> $args->{quantite},
						fond				=> $args->{fond},
						cf					=> $adminFonds->{$args->{fond}}->{cf},
						scipertodo	=> $args->{scipertodo},
						mail				=> $args->{mail},
						path1				=> $args->{path1},
						path2				=> $args->{path2},
						path3				=> $args->{path3},
						path4				=> $args->{path4},
						path1_hide	=> $args->{path1_hide},
						path2_hide	=> $args->{path2_hide},
						path3_hide	=> $args->{path3_hide},
						title				=> $args->{title},
						fonction1		=> $args->{fonction1},
						fonction2		=> $args->{fonction2},
						name				=> $args->{name},
						firstname		=> $args->{firstname},
						email				=> $args->{email},
						phone1			=> $args->{phone1},
						phone2			=> $args->{phone2},
						adresse			=> $args->{adresse},
						web					=> $args->{web},
						comments		=> $args->{comments},
				}
			);
			updateCmd($cmd);
								
	} else {
		$cmd = getCmd($args->{nocmd});
		error ('no_rights') unless canManage ($cmd->{scipertodo});
	}


	my $template 	 = initTempl ('show.tmpl', $cmd);

	if 			( $cmd->{etat} eq '1') {
			$template->param(submit_button_label => $tmpl_labels->{commander}->{$lang} );
	} elsif ( $cmd->{etat} eq '2') {
		if ( isReproStaff() ) {
			$template->param(submit_button_label => $tmpl_labels->{repro_en_cours}->{$lang} );
		} else {
		}
	} elsif ( $cmd->{etat} eq '3') {
			$template->param(submit_button_label => $tmpl_labels->{repro_done}->{$lang} );
	} elsif ( $cmd->{etat} eq '4') {
	} elsif ( $cmd->{etat} eq '5') {
	} else {
	}

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub valid {

	my $cmd 		 = getCmd($args->{nocmd});

	error ('no_rights') unless canManage ($cmd->{scipertodo});
	error ('no_fund') 	unless $cmd->{fond};

	my ($msg, $subj, $dest, $submit_note);
	#	- update status 
	updateCmd ( {
		nocmd => $cmd->{nocmd},
		etat	=> '2',
	});
	# - notify repro
	$msg = qq{
Commande de cartes de visite<br>
Bénéficiaire : $cmd->{firstname} $cmd->{name}<br>
No. commande : <a href="https://$ENV{SERVER_NAME}/show?nocmd=$cmd->{nocmd}">$cmd->{nocmd}</a><br>
Validée par : $login->{name} $login->{firstname} [$login->{sciper}]<br>
	};
	$subj = qq{Commande de cartes de visite : $cmd->{nocmd} - $cmd->{firstname} $cmd->{name}};
	$dest = $cmd->{mail} if $cmd->{mail};
	$submit_note = $tmpl_labels->{queue_note}->{$lang};
warn "--> valid : dest=$dest\n" if  $verbose;

	$cmd 		 = getCmd($args->{nocmd});
	
	my $template = initTempl ('show.tmpl', $cmd);

	$template->param(fond					=> $cmd->{fond} );
	$template->param(submit_note	=> $submit_note );
	$template->param(msg					=> $msg );
	$template->param(subj					=> $subj );
	$template->param(dest					=> $dest );
	$template->param(submit_button_label => $tmpl_labels->{repro_en_cours}->{$lang}) if isReproStaff() ;

	mailto ($dest, $subj, $msg, $cmd);

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub encours {

warn "--> encours\n" if  $verbose;
	error ('no_access') unless isReproStaff();
	my $cmd = updateCmd ( {
		nocmd => $args->{nocmd},
		etat	=> '3',
	});
	
	print "Content-Type: text/html; charset=utf-8\n\n";
	print qq{<script>location.href='/list?etat=2'</script>\n};
	exit;

	my $template 	 = initTempl ('show.tmpl', $cmd);

	$template->param(show_submit_note			=> $tmpl_labels->{repro_done_note}->{$lang} );
	$template->param(submit_button_label	=> $tmpl_labels->{repro_done}->{$lang} );
	$template->param(repro_action					=> 'done' );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub donem {
	$args->{done_return} = 1;
	foreach my $nocmd ("split /\|/", $args->{cmd_todo}) {
		$args->{nocmd} = $nocmd;
		done();
	}

	print "Content-Type: text/html; charset=utf-8\n\n";
	print qq{<script>location.href='/list?etat=3'</script>\n};
	exit;
}

#	-------------
sub done {

warn "--> done\n" if  $verbose;
	error ('no_access') unless isReproStaff();
	my $cmd = updateCmd ( {
		nocmd => $args->{nocmd},
		etat	=> '4',
	});

	my $msg  = qq{
English below
<br>
<br>
<br>Madame, Monsieur,
<br>
<br>Nous vous remercions pour votre commande.
<br>
<br>Les cartes de visites pour: XXX sont à votre disposition.
<br>
<br>Nous vous invitons à venir les retirer à notre guichet qui est ouvert du lundi au jeudi de 8h30 à 11h00 et de 13h30 à 16h00.
<br>Le vendredi de 8h30 à 11h00 et de 13h30 à 15h00.
<br>
<br>Nous vous informons que les cartes de visite pour EPFL pour
<br>
<br>Neuchâtel sont envoyées à:
<ul>
<br>    EPFL IMT - Réception
<br>    Maladière 71B
<br>    2002 Neuchâtel
</ul>
<br>Sion sont envoyées à:
<ul>
<br>    EPFL Valais
<br>    Magasin ISIC / Mr Seydoux
<br>    Rte de l'Industrie 17
<br>    Case postale 440
<br>    1950 Sion
</ul>
<br>Fribourg sont envoyées à:
<ul>
<br>    EPFL Fribourg
<br>    Mme. Véronica Cubarle
<br>    Passage du Cardinal 13B
<br>    1701 Fribourg
</ul>
<br>Genève sont envoyées à:
<ul>
<br>    Fondation Campus Biotech Geneva
<br>    Mr. Roberto Lia
<br>    Chemin des Mines 9
<br>    1202 Genève
</ul>
<br>
<br>Meilleures salutations
<br>
<br><img src="https://web2018.epfl.ch/5.2.0/icons/epfl-logo.png" width="110px"/>
<br>Carinne Christinaz
<br>Bureau : BP 243
<br>Tél. : 021 693 42 82
<br>E-mail : carinne.christinaz\@epfl.ch        
<br><a href="https://go.epfl.ch/venir-au-centre-impression">venir au centre d'impression</a>.
<br>
<hr>
<br>
<br>
<br>Madam, Sir,
<br>
<br>We thank you for your order.
<br>
<br>The businesscards for XXX are at your disposal.
<br>
<br>We invite you to pick them up at our desk which is open from Monday to Thursday from 8:30 to 11:00 and from 13:30 to 16:00.
<br>Friday our desk is open from 8:30 to 11:00 and from 13:30 to 15:00.
<br>
<br>We inform you that business cards for EPFL
<br>
<br> Neuchâtel are sent to:
<ul>
<br>    EPFL STI IMT-GE
<br>    Mrs. Joëlle Banjac
<br>    Case postale 526
<br>    Rue de la Maladière 71b
<br>    2002 Neuchâtel
</ul>
<br>Sion are sent to:
<ul>
<br>    EPFL Valais
<br>    Magasin ISIC / Mr. Seydoux
<br>    Rte de l'Industrie 17
<br>    Case postale 440
<br>    1950 Sion
</ul>
<br>Fribourg are sent to:
<ul>
<br>    EPFL Fribourg
<br>    Mme. Véronica Cubarle
<br>    Passage du Cardinal 13B
<br>    1701 Fribourg
</ul>
<br>Geneva are sent to:
<ul>
<br>    Fondation Campus Biotech Geneva
<br>    Mr. Roberto Lia
<br>    Chemin des Mines 9
<br>    1202 Genève
</ul>
<br>
<br>Kind regards
<br>
<br><img src="https://web2018.epfl.ch/5.2.0/icons/epfl-logo.png" width="110px" />
<br>Carinne Christinaz
<br>Office: BP 243
<br>Phone: 021 693 42 82
<br>E-mail: carinne.christinaz\@epfl.ch 
<br><a href="https://go.epfl.ch/venir-au-centre-impression">come to the print centre</a>.
<br>
	};
	$msg 			=~ s/XXX/$cmd->{firstname} $cmd->{name}/g;
	my $dest 	= $cmd->{email};	
	#	- notify admin
	$dest 	 .= ','.$cmd->{respemail} if $cmd->{respemail};

	my $subj = qq{Repro : votre commade de cartes de visite $cmd->{nocmd} - $cmd->{firstname} $cmd->{name}};
	mailto ($dest, $subj, $msg, $cmd);
	
	return if $args->{done_return};

	print "Content-Type: text/html; charset=utf-8\n\n";
	print qq{<script>location.href='/list?etat=3'</script>\n};
	exit;
	
	my $template 	 = initTempl ('show.tmpl', $cmd);

	$template->param(show_submit_note			=> $tmpl_labels->{repro_done_note}->{$lang} );
	$template->param(submit_button_label	=> $tmpl_labels->{repro_done}->{$lang} );
	$template->param(repro_action					=> 'done' );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}


#	-------------
sub copy {
	
	my $cmd = getCmd($args->{nocmd});
		 $cmd->{nocmd} 	= '';
		 $cmd->{fond} 	= '';
		 $cmd->{date}  	= sprintf "%04d-%02d-%02d %02d:%02d:%02d", $year, $mon, $mday, $hour, $mon, $sec;
		 $cmd->{resp}		= $login->{sciper};
		 $cmd->{etat} 	= '1';
	my @persons 			= getPersons ($cmd->{scipertodo});
	my $person 				= $persons[0];
	my $template 		 	= initTempl ('edit.tmpl', $cmd);

	my @accreds_loop;
	map {
		$person->{accreds}->{$_}->{scipertodo} = $cmd->{scipertodo};
		$person->{accreds}->{$_}->{nocmd} 		 = $cmd->{nocmd};
		$person->{accreds}->{$_}->{unitid} 		 = $_;
		$person->{accreds}->{$_}->{card_lang}  = $card_lang;
		push @accreds_loop, $person->{accreds}->{$_};
	} sort { $person->{accreds}->{$a}->{ordre} <=> $person->{accreds}->{$b}->{ordre} } keys %{$person->{accreds}};
	$template->param(accreds_loop	=> \@accreds_loop );

	$template->param(card_type_adresse	=> 'selected' ) if $cmd->{card_type} eq 'adresse';
	$template->param(card_type_people		=> 'selected' ) if $cmd->{card_type} eq 'people';
	$template->param(card_type_web			=> 'selected' ) if $cmd->{card_type} eq 'web';

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

sub getAdminsEmails {
	my $scipertodo = shift;
	return unless $scipertodo;

	my @persons = getPersons ($scipertodo);
	my $person = $persons[0];
	
	my $emails;
	my $admins;
	foreach my $unitid ( keys %{$person->{accreds}}) {
		map { 
			my @admins = $Persons->searchPersons ('sciper', $_->{persid});
			my $admin = $admins[0];
			$admins->{$_->{persid}} = {
				sciper 		=> $admin->{sciper},
				name 			=> $admin->{name},
				firstname => $admin->{firstname},
				email			=> $admin->{email},
			}	;
			$emails->{$admin->{email}} = 1;
		} $Rights->ListFirstRightAdmins ($droitCVIS, $unitid);
	}
	return join ",", keys %$emails;
}

#	-------------
sub list {

	my @cards_loop = $args->{etat} 
								 ? getCmdsByStatus($args->{etat})
								 : $args->{scipertodo}
								 	 ? getCmdsBySciper($args->{scipertodo})
								 	 : ();
	map { 
		if ($_->{etat} eq '1') {	#	- en saisie
			$_->{action} = 'edit';
		} else {
			$_->{action} = 'show' ;
		} 
	} @cards_loop;
	my $template 	 = initTempl ('list.tmpl');
	$template->param(status							=> $cards_status->{$args->{etat}}->{$lang}) if $args->{etat};
	$template->param(cards_loop					=> \@cards_loop);
	$template->param(status_processing	=> 1) if $args->{etat} eq '3';
	
	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#	-------------
sub delcmd {
	error ("cmd_not_found") unless $args->{nocmd};
warn "-->del : $args->{nocmd}\n" if  $verbose;
	my $cmd = getCmd($args->{nocmd});
	error ('cmd_not_found') unless $cmd->{nocmd};
	
	my $sql = qq{delete from cmds where nocmd=?};
	my $sth = $dbcards->query($sql, $cmd->{nocmd});
	error ('db_error') unless $sth;
	logger ( {
			nocmd 			=> $cmd->{nocmd},
			scipertodo	=> $cmd->{scipertodo},
			msg 				=> "delete etat=$cmd->{etat}",
		}
	);
	if ($args->{notif}) {
		my $msg = qq{
		Bonjour,
<br>		
<br>Votre commande de cartes de visite $cmd->{nocmd} a été annulée par $login->{firstname} $login->{name}.
<br>Questions et support : $helpdesk
<br>
<br>		Hello,
<br>Your businesscard order $cmd->{nocmd} has been canceled by $login->{firstname} $login->{name}.
<br>Questions and support : $helpdesk
<br>
		};
		my $dest = $cmd->{email};	
			 $dest .= ','.$cmd->{respemail} if $cmd->{respemail};

		my $subj = qq{Repro : commande de cartes de visite annulée $cmd->{nocmd} - $cmd->{firstname} $cmd->{name}};
		mailto ($dest, $subj, $msg);
	}
	my $template = initTempl ('delcmd.tmpl', $cmd);
	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;
	
}

#_______________
sub mailto {
  my ($dest, $subj, $msg, $cmd) = @_;

  my $sendmail = '/usr/sbin/sendmail';

 	if ($DEBUG) {
 		warn "--> mailto : $dest, $subj\n" if  $verbose;
 	}
  $dest			 	 = $mailRepro unless $dest;

  unless ($dest) {
		$subj .= qq{ **ERR : dest vide **}; 
		$dest  = 'ion.cionca@epfl.ch';
  }
  my $subject = encode_mimeword($subj);
  my $replyTo = 'noreply@epfl.ch';
  my $mailFrom= 'noreply@epfl.ch';
 
  eval {
  	open (MAIL, "| $sendmail -t -F$mailFrom -f$mailFrom") or return;
  	print MAIL qq{To: $dest\n};
  	print MAIL qq{From: $mailFrom\n};
  	print MAIL qq{Reply-to: $replyTo
Subject: $subject
Content-type: text/html; charset=iso-8859-1

<header>
<link rel="stylesheet" href="https://web2018.epfl.ch/2.1.0/css/elements.min.css">
<link rel="stylesheet" href="http://test-businesscard.epfl.ch/styles/businesscard.css">
</header>
<body style="padding: 20px;">

$msg
<br>
};
		if ($cmd) {
			my $template = initTempl ('card.tmpl', $cmd);
			print MAIL qq{<hr><b>Votre commande</b><br>},$template->output;
		}

  	close (MAIL);
  } or do {
  	warn "error in mailto [ $dest ] : $@\n"; 
  	return
  };

}

#--------
sub isReproStaff {
	return 1 if $repro_staff =~ /$login->{sciper}/;
	return 0;
}

#--------
sub isAdmin {
	return 1 if scalar (keys %$adminUnits) > 0;
	return 0;
}

#--------
sub updateCmd {
	my $cmd = shift;

	my ($sql, @params, $nocmd);
	foreach my $field (keys %$cmd) {
		next if $field =~ /^(nocmd|respname|respfirstname|respemail)$/;
		$sql .= qq{$field=?, };
		push @params, $cmd->{$field};
	}
	$sql =~ s/, $//;
	my $op;
	if ($cmd->{nocmd}) {
		$nocmd = $cmd->{nocmd};
		$sql = qq{update cmds set $sql where nocmd=? };
		$op = 'update';
	} else {
		$nocmd = getCmdNb();
		$sql = qq{insert into cmds set $sql, date = now(), nocmd	= ? };
		$op = 'add';
	}
	push @params, $nocmd;

	my $sth = $dbcards->prepare($sql);
	error ('db_error') unless $sth;
	my $rv = $sth->execute(@params);
	error ('db_error') unless $rv;

	$cmd =  getCmd($cmd->{nocmd}) unless $cmd->{scipertodo};

	logger ({
		scipertodo => $cmd->{scipertodo},
		nocmd			 => $cmd->{nocmd},
		msg				 => qq{$op status=$cmd->{etat}},
		}
	);
	return getCmd($nocmd);

}

#--------
sub getAllCmdsByStatus {
	my $cmds;
	map { 
		$cmds->{$_->{etat}}++
	}  getCmdsByStatus();
	return $cmds;
}

#--------
sub getCmdsByStatus {
	my $etat = shift;

	my $sql = qq{select * from cmds };
		 $sql .= qq{ where etat=? } if ($etat) ;
	my @params = ($etat) if ($etat) ;
		 $sql .= qq{order by date desc};
	my $sth = $dbcards->query($sql, @params);
	my @cmds; my $resps_scipers;
	while (my $cmd = $sth->fetchrow_hashref) {
		next unless canManage ($cmd->{scipertodo});
		$cmd->{status} 								= $cards_status->{$cmd->{etat}}->{$lang};
		$resps_scipers->{$cmd->{resp}}= 1;
		push @cmds, $cmd;
	}
	@cmds = addRespData (@cmds) if $etat;
	return @cmds;
}

#--------
sub getCmdsBySciper {
	my $scipertodo = shift;
	return unless $scipertodo;
	my $sql = qq{select * from cmds where scipertodo=? order by date desc};
	my $sth = $dbcards->query($sql, $scipertodo);
	my @cmds; my $resps_scipers;
	while (my $cmd = $sth->fetchrow_hashref) {
		next unless canManage ($cmd->{scipertodo});
		$cmd->{status} 								= $cards_status->{$cmd->{etat}}->{$lang};
		$resps_scipers->{$cmd->{resp}}= 1;
		push @cmds, $cmd;
	}
	@cmds = addRespData (@cmds);
	return @cmds;

}

#--------
sub getCmd {
	my $nocmd  = shift;
	error ("cmd_not_found") unless $nocmd;
	
	my $cmd;
	if ($nocmd) {
		my $sql = qq{select * from cmds where nocmd=?};
		my $sth = $dbcards->query($sql, $nocmd);
			 $cmd = $sth->fetchrow_hashref;
	}

	error ("cmd_not_found") unless defined $cmd->{nocmd};
	my @cmds = addRespData ($cmd);
	return $cmds[0];

}

#--------
sub makeCardFromDinfo {
	my $person = shift;
	error ('person_not_found') unless $person->{sciper};

	my $unitid 		 = $args->{unitid};
	
	my $accred;
	if ( $unitid ) {
		$accred = $person->{accreds}->{$unitid};
	} else {
		map { $accred = $person->{accreds}->{$_} if $person->{accreds}->{$_}->{ordre} eq '1' } keys %{$person->{accreds}};
	}

	my $cmd = {
		etat			=> '1',
		quantite	=> '50',
		card_type	=> 'adresse',
		scipertodo=> $person->{sciper},
		mail			=> $person->{email},
		resp			=> $login->{sciper},
		path1			=> $accred->{path1},
		path2			=> $accred->{path2},
		path3			=> $accred->{path3},
		path4			=> $accred->{path4},
		fonction1	=> $accred->{fonction},
		name			=> $person->{name},
		firstname	=> $person->{firstname},
		email			=> $person->{email},
		phone1		=> $accred->{bottin}->{phones}->[0],
		phone2		=> $accred->{bottin}->{phones}->[1],
		adresse		=> $accred->{bottin}->{adresse},
	};
	
	return $cmd;
	
}

#--------
sub logger {
	my $params = shift;
warn "--> logger : params\n".Dumper($params);
	return unless $params;
	my $sql = qq{insert into logs set
		sciper		 = ?,
		scipertodo = ?,
		nocmd			 = ?,
		msg				 = ?
	};
	my $sth = $dbcards->prepare($sql);
	error ('db_error') unless $sth;
	my $rv = $sth->execute($login->{sciper}, $params->{scipertodo}, $params->{nocmd}, $params->{msg});
	error ('db_error') unless $rv;

}


#	-------------
sub setTmplParam {
	my ($template, $name, $value) = @_;
	my $max_size = $name eq 'adresse' ? $MAX_SIZE_ADDR : $MAX_SIZE;
	if ( length($value) > $max_size ) {
		$template->param($name.'_alert'	=> 'class="oversize"') ;
		$value = substr($value, 0, $max_size);
		$show_alert = 1;
	}
	$template->param($name					=> $value);
}

#	-------------
sub initTempl {
	my ($tmplpath, $cmd) = @_;
	
	error ('init_templ') unless $tmplpath;
	
	my $template = HTML::Template->new(
		filename 					=> "$tmpldir/$tmplpath",
		strict 						=> 0,
		cache 						=> 1,
		global_vars 			=> 1,
		utf8 							=> 1,
    die_on_bad_params => 0,
	) or die "err : $!";

	foreach my $label ( keys %$tmpl_labels) {
		$template->param("$label"	=> $tmpl_labels->{$label}->{$lang} );
	}
	
	$template->param(path_info  		 => $ENV{PATH_INFO});
	$template->param(lang				 		 => $lang );
	$template->param(browser_EN 		 => $lang eq 'en' );
	$template->param(browser_FR 		 => $lang eq 'fr' ) ;
	$template->param(login_sciper		 => $login->{sciper}) ;
	$template->param(login_name			 => $login->{name}) ;
	$template->param(login_firstname => $login->{firstname}) ;
	$template->param(isAdmin				 => 1) if isAdmin() || isReproStaff();
	$template->param(isReproStaff		 => 1) if isReproStaff();

	my @users_loop;
	foreach my $sciper (sort { $usersToManage->{$a}->{nom} cmp $usersToManage->{$b}->{nom} } keys %$usersToManage) {
		push @users_loop, {
			sciper => $sciper,
			nom 	 => $usersToManage->{$sciper}->{nom},
			pnom 	 => $usersToManage->{$sciper}->{pnom},
		}
	}
	$template->param(users_loop			 => \@users_loop );

	my @fonds_loop;
	foreach my $fond (sort keys %$adminFonds) {
		push @fonds_loop, {
			fond_nb				=> $fond,
			fond_label		=> $adminFonds->{$fond}->{libelle},
			fond_selected => $cmd->{fond} eq $fond ? 'selected' : '',
		};
	}
	$template->param(fonds_loop			 => \@fonds_loop );

	my $cmdsByStatus	= getAllCmdsByStatus () ;
	my @status_loop;
	foreach my $status_id (sort { $a <=> $b } keys %$cards_status) {
		push @status_loop, {
				status_id			=> $status_id,
				status_nb			=> $cmdsByStatus->{$status_id},
				status_label	=> $cards_status->{$status_id}->{$lang},
		};
	}
	$template->param(status_loop		 => \@status_loop);

	return $template unless $cmd;

	my $mailid;
	if ( $cmd->{email} =~/([^@]*)@(.*)$/) {
		$mailid = $1;
	}
	my $path1_img = $cmd->{path1_hide} ? '/images/eye-off.png'		: '/images/eye.png';
	my $path2_img = $cmd->{path2_hide} ? '/images/eye-off.png'		: '/images/eye.png';
	my $path3_img = $cmd->{path3_hide} ? '/images/eye-off.png'		: '/images/eye.png';

	my $line4	= $cmd->{card_type} eq 'adresse'
						? $cmd->{adresse} 
						: $cmd->{card_type} eq 'people'
							? 'people.epfl.ch/'.$mailid
							: $cmd->{card_type} eq 'web'
								? $cmd->{web}
								: '';
	$template->param(status_input				=> 1 ) if $cmd->{etat}  eq '1';
	$template->param(status_queue				=> 1 ) if $cmd->{etat}  eq '2';
	$template->param(status_processing	=> 1 ) if $cmd->{etat}  eq '3';
	$template->param(status_done				=> 1 ) if $cmd->{etat}  eq '4';
	$template->param(status_archive			=> 1 ) if $cmd->{etat}  eq '5';

	$template->param(card_type 					=> $cmd->{card_type} );
	$template->param(nocmd			 				=> $cmd->{nocmd} );
	$template->param(etat				 				=> $cmd->{etat} );
	$template->param(fond				 				=> $cmd->{fond} );
	$template->param(status			 				=> $cards_status->{$cmd->{etat}}->{$lang} );

	$template->param(resp				 				=> $cmd->{resp} );
	$template->param(quantite		 				=> $cmd->{quantite} );
	$template->param(date				 				=> $cmd->{date} );
	$template->param(scipertodo	 				=> $cmd->{scipertodo} );
	$template->param(mailid							=> $mailid );
	$template->param(path1_hide					=> $cmd->{path1_hide} );
	$template->param(path2_hide					=> $cmd->{path2_hide} );
	$template->param(path3_hide					=> $cmd->{path3_hide} );
	$template->param(path1_img					=> $path1_img );
	$template->param(path2_img					=> $path2_img );
	$template->param(path3_img					=> $path3_img );
	$template->param(comments						=> $cmd->{comments} );

	my @quant_loop;
	my $prices_list;
	foreach my $quant (sort {$a <=> $b} keys %prices) {
		my $selected =  $cmd->{quantite} eq $quant ? 'selected' : '';
		push @quant_loop, {
			quantite	=> $quant,
			selected	=> $selected,
		};
		$prices_list .= qq{$quant pc Frs $prices{$quant}, };
	}
	$prices_list =~ s/, $//;
	$template->param(quant_loop				=> \@quant_loop ) ;
	$template->param(prices_list			=> $prices_list ) ;

	setTmplParam ($template, 'title',			$cmd->{title});
	setTmplParam ($template, 'name', 			$cmd->{name});
	setTmplParam ($template, 'firstname', $cmd->{firstname});
	setTmplParam ($template, 'path1', 		$cmd->{path1});
	setTmplParam ($template, 'path2', 		$cmd->{path2});
	setTmplParam ($template, 'path3', 		$cmd->{path3});
	setTmplParam ($template, 'path4', 		$cmd->{path4});
	setTmplParam ($template, 'fonction1', $cmd->{fonction1});
	setTmplParam ($template, 'fonction2', $cmd->{fonction2});
	setTmplParam ($template, 'phone1', 		$cmd->{phone1});
	setTmplParam ($template, 'phone2', 		$cmd->{phone2});
	setTmplParam ($template, 'email', 		$cmd->{email});
	
	$template->param(adresse							=> $cmd->{adresse} );
	
	setTmplParam ($template, 'web', 			$cmd->{web});
	$line4 =~ s/\r/<br>/ if $cmd->{card_type} eq 'adresse';
	$template->param(line4							=> $line4 );

	$template->param(show_alert			=> $show_alert ) ;

	return $template;

}

#--------
sub chkArgs {
	my ($args) = @_;
	
	my $errmsg;
	foreach my $name (keys %$args) {
		next unless $name;
		my $value = $args->{$name};
		if ($name =~ /^(lang|card_lang)$/i) {
			unless ($value =~ /^(en|fr|)$/i) {
				$errmsg = 'wrong_params';
			}
		}
		if ($name =~ /^(sciper)$/i) {
			unless ($value =~ /^\d{6}$/) {
				$errmsg = 'wrong_params';
			}
		}

		$value =~ s/\\a/a/ig;
		$value =~ s/\\a/a/ig;
		$value =~ s/\\b/b/ig;
		$value =~ s/\\c/c/ig;
		$value =~ s/\\d/d/ig;
		$value =~ s/\\e/e/ig;
		$value =~ s/\\f/f/ig;
		$value =~ s/\\j/j/ig;
		$value =~ s/\\k/k/ig;
		$value =~ s/\\l/l/ig;
		$value =~ s/\\o/o/ig;
		$value =~ s/\\p/p/ig;
		$value =~ s/\\r/r/ig;
		$value =~ s/\\s/s/ig;
		$value =~ s/\\t/t/ig;
		$value =~ s/\\u/u/ig;
		$value =~ s/\\v/v/ig;
		$value =~ s/\\x/x/ig;
		$value =~ s/\\y/y/ig;

		#	- URI decode
		$value =~ s/\+/ /g; $value =~ s/&#([A-Fa-f\d]+);/chr $1/eg;
		
		checkJSExploits ($value);

		#	- escape HTML 
		$value =~ s#&#&amp;#g;
		$value =~ s#<#&lt;#g;
		$value =~ s#>#&gt;#g;
		$value =~ s#"&#&quot;#g;

	}
	
	error ($errmsg) if 	$errmsg;

}

#___________________
sub checkJSExploits {
	my $value = shift;
	return unless $value;

	# - check JS CSS vulnerabilty
	my $exploittxt = qq{content refused, potential malware or illegal keywords found} ;
	my @exploits1 = ('FRAME','OBJECT','META','APPLET','LINK','IFRAME');
	# - check JS events vulnerabilty
	my @exploits2 = (
		'onblur',
		'onchange',
		'onclick',
		'oncopy',
		'oncut',
		'ondblclick',
		'ondrag',
		'ondrop',
		'onerror',
		'onfocus',
		'onkey',
		'onkeypress',
		'onload',
		'onmouse',
		'onpaste',
		'onreset',
		'onresize',
		'onsearch',
		'onselect',
		'onsubmit',
		'onunload',
		'oncontext',
		'oninput',
		'oninvalid',
	);
	my @exploits3 = (
		'script',
		'style',
		'javascript',
		'audio',
		'video',
	);

	$value =~ s/\\a/a/ig;
	$value =~ s/\\a/a/ig;
	$value =~ s/\\b/b/ig;
	$value =~ s/\\c/c/ig;
	$value =~ s/\\d/d/ig;
	$value =~ s/\\e/e/ig;
	$value =~ s/\\f/f/ig;
	$value =~ s/\\j/j/ig;
	$value =~ s/\\k/k/ig;
	$value =~ s/\\l/l/ig;
	$value =~ s/\\o/o/ig;
	$value =~ s/\\p/p/ig;
	$value =~ s/\\r/r/ig;
	$value =~ s/\\s/s/ig;
	$value =~ s/\\t/t/ig;
	$value =~ s/\\u/u/ig;
	$value =~ s/\\v/v/ig;
	$value =~ s/\\x/x/ig;
	$value =~ s/\\y/y/ig;

	#	- URI decode
	$value =~ s/\+/ /g; $value =~ s/&#([A-Fa-f\d]+);/chr $1/eg;
	$value =~ s/\\//g;

	foreach my $exploit (@exploits1) {
		 error ('wrong_params') if ($value =~ m#<\s*$exploit[^>]*>#i) ;
	}

	foreach my $exploit (@exploits2) {
		 if ($value =~ /\b$exploit(enter|up|down|over|out|press)?\s?=/i) {
warn " ** ERR JS EXPLOIT 2 : exploit=$exploit\n";		   
				error ('wrong_params');
		 }
	}

	foreach my $exploit (@exploits3) {
		 if ($value =~ m#<\s*$exploit[^>]*>#i) {
warn " ** ERR JS EXPLOIT 3 : exploit=$exploit\n";		   
				error ('wrong_params');
		 }
	}

}

#--------
sub getCmdNb {
	my @chars = ("A".."Z");
	my $string;
	$string .= $chars[rand @chars] for 1..8;
	return $string.time;
}

#--------
sub error {
	my $msg = shift;
warn "--> error : msg=$msg\n";
	return unless $tmpl_labels->{$msg};
	my $template = initTempl ('error.tmpl');
	$template->param( errmsg	=> $tmpl_labels->{$msg}->{$lang} );

	print "Content-Type: text/html; charset=utf-8\n\n";
	print $template->output;
	exit;

}

#--------
sub authenticate {
	warn "Tequila:".Dumper(`$tequila`);
  unless ($tequila) {
		my $tequila_redirect_ports;
		$tequila_redirect_ports = defined $ENV{'TEQUILA_REDIRECT_PORT'} ? ":".$ENV{'TEQUILA_REDIRECT_PORT'} : "";
		$tequila = new Tequila::Client (
			service    => 'Businesscards',
			request    => [ 'uniqueid', 'allunits' ],
			identities => 'any',
			urlaccess  => "https://$ENV{SERVER_NAME}" . $tequila_redirect_ports . "$ENV{REQUEST_URI}?$ENV{QUERY_STRING}",
		);
    $tequila->init ();
  } 

  $tequila->authenticate ();
  $login->{sciper} 	 = $tequila->{attrs}{uniqueid};
	if ($login->{sciper} eq '104782') {
	}
	
	$login = $Persons->getPerson ( $login->{sciper} );

warn "--> authenticate : $login->{sciper}, $login->{name}, $login->{firstname}\n"; 
  
  $adminUnits = $Accreds->getAllUnitsWhereHasRight($login->{sciper}, 'cartevisite');
  error ('no_access') if !$adminUnits;
	map { delete $adminUnits->{$_} if $adminUnits->{$_} =~ /n/g; } keys %$adminUnits;
 
	$usersToManage = getPersonsFromUnits(keys %$adminUnits );
 
	error ('no_users') unless $usersToManage;
	$adminFonds 	 = getFondsForUnits();
	error ('no_funds') unless isReproStaff() || $adminFonds;
 	
}

#--------
sub getPersonsFromUnits {
	my (@unitsids) = @_;
warn "--> getPersonsFromUnits : @unitsids\n" if  $verbose;

	my $persons;
	foreach my $unitid (@unitsids) {

		my $sql = qq{
			select persid as sciper, nom_acc as nom, prenom_acc as pnom
				from accred.accreds
				join dinfo.sciper on accreds.persid=sciper.sciper
				join dinfo.unites on accreds.unitid = dinfo.unites.id_unite
			 where (accreds.debval is NULL or accreds.debval <= now())
				 and (accreds.finval is NULL or accreds.finval  > now())
				 and unitid = ?
				 and unitid < 50000
		};
		my $sth = $dinfodb->query ($sql, $unitid);
		while (my $pers = $sth->fetchrow_hashref) {
			next unless $pers->{sciper};
			$persons->{$pers->{sciper}} = {
				nom 	=> $pers->{nom},
				pnom 	=> $pers->{pnom},
			}
		}
	}

	return $persons;
}

#--------
sub canManage {
	my $scipertodo = shift;
	
	return 0 unless $scipertodo;
	return 1 if			isReproStaff();
	return 0 unless isAdmin();
	return 1 if $usersToManage->{$scipertodo};

	return 0;

}

#--------
sub canManage_OLD {
	my $scipertodo = shift;
	
	return 0 unless $scipertodo;
	return 1 if			isReproStaff();
	return 0 unless isAdmin();
	map {
		return 1 if defined $adminUnits->{$_->{unitid}}  ;
	} $Accreds->getAccreds($scipertodo);

	return 0;

}

#--------
sub canManage_ALL {
	my $cmd = shift;
	return 0 unless $cmd;
	return 1 if isReproStaff();
	return 0 unless isAdmin();
	return 1 if $cmd->{resp} eq $login->{sciper};
	return 0;

}

sub getManagedUsers {
	my $users;
	foreach my $unit (keys %$adminUnits) {
		my @personsInUnit = $Accreds->getPersonsInUnit($unit);
		map { 
			$users->{$_} = 1;
		} @personsInUnit;
	}
	return $users;
}

#--------
sub getFondsForUnit {
	my $unitid = shift;
	my $sql = qq{
	select no_fond, fonds.libelle, unit_id 
	from dinfo.unites 
	left join difo.fonds on concat('F',unites.cf)=fonds.cf
	where 
			etat='O' and
			id_unite=?
	};
	my $sth = $dinfodb->query($sql, $unitid);
	my $fonds;
	while (my $data = $sth->fetchrow_hashref) {
		$fonds->{$unitid}->{$data->{no_fond}} = $data->{libelle}
	}
	return $fonds;
}

#--------
sub getFondsForUnits {

	my $unitsids = join ",", keys %$adminUnits;
	my $sql = qq{
	select no_fond, fonds.libelle, id_unite, unites.cf
	from dinfo.unites 
	left join dinfo.fonds on concat('F',unites.cf)=fonds.cf
	where 
			etat='O' and
			id_unite in ($unitsids)
	};
	
	my $sth = $dinfodb->query($sql);
	my $fonds;
	while (my $data = $sth->fetchrow_hashref) {
		$fonds->{$data->{no_fond}} = {
			libelle => $data->{libelle},
			cf 			=> $data->{cf},
		};
	}
	return $fonds;
	
}

#--------
sub getPersons {
	my $key 		= shift;
warn "--> getPersons : key=$key\n" if $verbose;
	return unless $key;

	my $sth;
	if ( $key=~ /\d\d\d\d\d\d/) {
		my $sql = qq{
		select 
			 dinfo.sciper.sciper,
			 dinfo.sciper.nom_acc  		 as name,
			 dinfo.sciper.prenom_acc   as firstname,
			 dinfo.sciper.nom_usuel    as nameus,
			 dinfo.sciper.prenom_usuel as firstnameus,
			 dinfo.sciper.sexe         as sex,
			 dinfo.emails.addrlog      as email
		from dinfo.sciper
		left join dinfo.emails	on dinfo.sciper.sciper = dinfo.emails.sciper
		where dinfo.sciper.sciper = ?
		};
		$sth = $dinfodb->query ($sql, $key);

	} else {
		my $sql = qq{
		select 
			 dinfo.sciper.sciper,
			 dinfo.sciper.nom_acc  		 as name,
			 dinfo.sciper.prenom_acc   as firstname,
			 dinfo.sciper.nom_usuel    as nameus,
			 dinfo.sciper.prenom_usuel as firstnameus,
			 dinfo.sciper.sexe         as sex,
			 dinfo.emails.addrlog      as email
		from dinfo.sciper
		left join dinfo.emails		on dinfo.sciper.sciper = dinfo.emails.sciper
		where ( dinfo.sciper.nom_acc like ? or dinfo.sciper.nom_usuel like ? )
		order by name, firstname
		};
		$sth = $dinfodb->query ($sql, $key.'%', $key.'%');
	}

	my @persons;
	while (my $data = $sth->fetchrow_hashref) {
			next unless canManage ($data->{sciper}) ;
		push @persons, $data;
	}
	error('person_not_found') unless scalar @persons;

#  warn "--> getPersons persons\n".Dumper(@persons);
#  warn "--> getPersons persons found=".scalar (@persons);
	
	#	- multiple finds
	if (scalar (@persons) > 1) {
		return @persons;
	}
#warn "--> getPersons found one\n";
	
	my $person = $persons[0];
	
	$person->{name} 		 = $person->{nameus} 			if $person->{nameus};
	$person->{firstname} = $person->{firstnameus} if $person->{firstnameus};
	my $bottin;
	my $sql = qq{select distinct dinfo.annu.*, dinfo.adrspost.adresse from
		dinfo.annu left join dinfo.adrspost on annu.sciper=adrspost.sciper
		where adrspost.unite=annu.unite and annu.sciper=? 
	};
	my $sth = $dinfodb->query($sql, $person->{sciper});
	while (my $item = $sth->fetchrow_hashref) {
		push @{$bottin->{$item->{unite}}->{rooms}}, {
			room_abr	=> $item->{local},
		};
		push @{$bottin->{$item->{unite}}->{phones}}, norm_phone($item->{telephone1}) if $item->{telephone1};
		push @{$bottin->{$item->{unite}}->{phones}}, norm_phone($item->{telephone2}) if $item->{telephone2};
 		my @adr = split / \$ /, $item->{adresse};
 		$adr[1] =~ s/ \(.*\)//;
 		$adr[3] =~ s/^([A-Z])*-//g;
 		$bottin->{$item->{unite}}->{adresse}  = qq{$adr[1], $adr[2], $adr[3]};
	}
#warn "--> getPersons bottin\n".Dumper($bottin);
	
  my $sql = qq{
    select accred.accreds.unitid  as unitid,
				accred.accreds.ordre     	as ordre,
				accred.accreds.statusid  	as status,
				path1.hierarchie					as hierarchie,
				accred.positions.labelfr  as fonctionfr,
				accred.positions.labelxx  as fonctionxx,
				accred.positions.labelen  as fonctionen,
				path3.libelle     				as libelle3fr,
				path3.libelle_en  				as libelle3en,
				path2.libelle     				as libelle2fr,
				path2.libelle_en  				as libelle2en,
        path1.libelle 						as libelle1fr,
				path1.libelle_en  				as libelle1en
      from accred.accreds
           join dinfo.allunits as path3  on path3.id_unite = accred.accreds.unitid
           join dinfo.allunits as path2  on path2.id_unite = path3.level3
           join dinfo.allunits as path1  on path1.id_unite = path3.level2
           
           left outer join accred.positions on   accred.positions.id = accred.accreds.posid
     where accred.accreds.persid = ?
       and accred.accreds.debval < now()
       and (accred.accreds.finval is null or accred.accreds.finval > now())
     order by ordre;
  };
	my $sth = $dinfodb->query ($sql, $person->{sciper});
	my $accreds;
	while ( my $data = $sth->fetchrow_hashref ) {
		my $accred = {
			unitid	=> $data->{unitid},
			ordre		=> $data->{ordre},
			status	=> $data->{status},
			bottin	=> $bottin->{$data->{unitid}},
		};
		
		$accred->{hierarchie} = $data->{hierarchie};
		$accred->{hierarchie} =~ s/^EPFL //;;

		if ($card_lang eq 'fr') {
			$accred->{path1} = $data->{libelle1fr};
			$accred->{path2} = $data->{libelle2fr};
			$accred->{path3} = $data->{libelle3fr};
			$accred->{path4} = $data->{libelle3fr};
			$accred->{fonction} = $person->{sex} eq 'F' 
												 ? $data->{fonctionxx}
													 ? $data->{fonctionxx}
													 : $data->{fonctionfr}
												 : $data->{fonctionfr};
			$accred->{path1} = $data->{libelle1fr};
		} else {
			$accred->{path1} = $data->{libelle1en};
			$accred->{path2} = $data->{libelle2en};
			$accred->{path3} = $data->{libelle3en};
			$accred->{path4} = $data->{libelle3en};
			$accred->{fonction} = $data->{fonctionen}
													 ? $data->{fonctionen}
													 : $data->{fonctionfr};
		}		
		if ( defined $FACULTES->{$accred->{hierarchie}} && scalar @{$FACULTES->{$accred->{hierarchie}}->{$card_lang}} > 1 ) {
			$accred->{path1} = $FACULTES->{$accred->{hierarchie}}->{$card_lang}->[0];
			$accred->{path2} = $FACULTES->{$accred->{hierarchie}}->{$card_lang}->[1];
			$accred->{path3} = '';
		} else {
			$accred->{path4} = $accred->{path3};
			$accred->{path3} = $accred->{path2};
			$accred->{path2} = $accred->{path1};
			$accred->{path1} = '';
		}

		$accreds->{$data->{unitid}} = $accred;
	} 

	return (
		{
		sciper		=> $person->{sciper},
		name			=> $person->{name},
		firstname	=> $person->{firstname},
		sex				=> $person->{sex},
		email			=> $person->{email},
		accreds		=> $accreds,
		} );

}

#--------
sub addRespData {
	my @cmds = @_;
warn "--> addRespData\n" ;
	my %resps_scipers = map {
		$_->{resp} => 1
	} @cmds;
	my $resps = getMultiplePersons (join ',', keys %resps_scipers);
	foreach my $cmd (@cmds) { 
		if ($resps->{$cmd->{resp}}) {
			$cmd->{respname} 			= $resps->{$cmd->{resp}}->{name};
			$cmd->{respfirstname} = $resps->{$cmd->{resp}}->{firstname};
			$cmd->{respemail} 		= $resps->{$cmd->{resp}}->{email};
		}
	}
	return @cmds;
}

#--------
sub getMultiplePersons {
	my $scipers	= shift;
		 $scipers =~ s/^,//;
		 $scipers =~ s/,$//;
	return unless $scipers;

	my $sql = qq{
		select 
			 dinfo.sciper.sciper,
			 dinfo.sciper.nom_acc  		 as name,
			 dinfo.sciper.prenom_acc   as firstname,
			 dinfo.sciper.nom_usuel    as nameus,
			 dinfo.sciper.prenom_usuel as firstnameus,
			 dinfo.emails.addrlog      as email
		from dinfo.sciper
		left join dinfo.emails	 on dinfo.sciper.sciper = dinfo.emails.sciper
		where dinfo.sciper.sciper in ($scipers)
	};
	my $sth = $dinfodb->prepare($sql);
	error ('db_error') unless $sth;
	my $rv = $sth->execute();
	error ('db_error') unless $rv;

	my $persons;
	while (my $person = $sth->fetchrow_hashref) {
		next unless $person->{sciper};
		$persons->{$person->{sciper}} = {
			sciper		=> $person->{sciper},
			name			=> $person->{name},
			firstname	=> $person->{firstname},
			sex				=> $person->{sex},
			email			=> $person->{email},
		};
	}
	return $persons;
}

#--------
sub norm_phone {
	my $phone = shift;
	return unless $phone;
	if (length ($phone) > 5) {
		if ($phone =~ /^00/) {
		} elsif ($phone =~ /^0/) {
			my $zone = substr ($phone, 1, 2);
			$phone =~ s/^0$zone//;
			$phone = "+41 $zone ".$phone;
		}
		return $phone;
	} else {
		return qq{+41 21 69 $phone};
	}
}

#--------
sub getCookie {
  my ($cookie) = @_;
  return unless $cookie;
	
  foreach my $Cookie (split(/;/, $ENV {HTTP_COOKIE})) {
	 $Cookie =~ s/^\s*//;
	 $Cookie =~ s/\s*$//;
	 next unless $Cookie;
	 if (($Cookie =~ /^$cookie=(.*)$/)) {
	 	return $1;
	 };
  }	
  return '';
}

#--------
sub setCookie {
  my ($cookie, $value) = @_;
  return unless $cookie;
  print qq{Set-Cookie: $cookie=$value; path=/;  expires=''; secure; HttpOnly\r\n};

}
